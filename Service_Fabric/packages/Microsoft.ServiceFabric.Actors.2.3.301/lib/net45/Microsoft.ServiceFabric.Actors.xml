<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Actors</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException">
            <summary>
            Exception thrown by actor runtime when runtime cannot acquire the turn based concurrency lock to dispatch the method.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorExtensions">
            <summary>
            Class containing extension methods for Actors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorExtensions.GetActorId``1(``0)">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor./&gt;
            </summary>
            <typeparam name="TIActor">Actor interface type.</typeparam>
            <param name="actor">Actor object to get ActorId for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorExtensions.GetActorReference(Microsoft.ServiceFabric.Actors.IActor)">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for the actor.
            </summary>
            <param name="actor">Actor object to get ActorReference for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for the actor.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorId">
            <summary>
            ActorId represents identity of an actor within an actor service. The actors can be identified by <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/> or <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of ActorId class with Id value of type <see cref="T:System.Int64"/>.
            </summary>
            <param name="id">Value for actor id.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of ActorId class with Id value of type <see cref="T:System.Guid"/>.
            </summary>
            <param name="id">Value for actor id.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.String)">
            <summary>
            Initializes a new instance of ActorId class with Id value of type <see cref="T:System.String"/>.
            </summary>
            <param name="id">Value for actor id.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetLongId">
            <summary>
            Gets id for ActorId whose <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Long"/>.
            </summary>
            <returns><see cref="T:System.Int64"/> id value for AcotrId.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetGuidId">
            <summary>
            Gets id for ActorId whose <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Guid"/>.
            </summary>
            <returns><see cref="T:System.Guid"/> id value for AcotrId.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetStringId">
            <summary>
            Gets id for ActorId whose <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.String"/>.
            </summary>
            <returns><see cref="T:System.String"/> id value for AcotrId.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey">
            <summary>
            Gets partition key for the ActorId.
            </summary>
            <returns>The key for locating the partition of the actor service that is responsible for this ActorId.</returns>
            <remarks> 
                <list type="bullet">
                    <item>The actor service is always partitioned using <see cref="F:System.Fabric.Description.PartitionScheme.UniformInt64Range"/> scheme. Therefore the partition key is of <see cref="T:System.Int64"/> type.</item>
                    <item>The partition key is generated based on the <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> and the id value as follows:
                        <list type="bullet">
                            <item>ActorIdKind.String : CRC64 hash of the UTF8 bytes of the string id.</item>
                            <item>ActorIdKind.Guid: CRC64 hash of the bytes of the guid id.</item>
                            <item>ActorIdKind.Long: Actual value of the long id.</item>
                        </list>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns>Returns a string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.GetHashCode">
            <summary>
            Overrides <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <returns>Hash code for the current object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.Equals(System.Object)">
            <summary>
            Determines whether this instance and a specified object, which must also be a <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> object, 
            have the same value. Overrides <see cref="M:System.Object.Equals(System.Object)"/>.
            </summary>
            <param name="obj">The actorId to compare to this instance. </param>
            <returns>true if obj is a <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> and its value is the same as this instance; 
            otherwise, false. If obj is null, the method returns false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.Equals(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Determines whether this instance and another specified <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> object have the same value.
            </summary>
            <param name="other">The actorId to compare to this instance. </param>
            <returns>true if the <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> and id of the other parameter is the same as the
            <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> and id of this instance; otherwise, false. 
            If other is null, the method returns false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Compares this instance with a specified <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> object and indicates whether this
            instance precedes, follows, or appears in the same position in the sort order as the specified actorId. 
            </summary>
            <param name="other">The actorId to compare with this instance. </param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears
             in the same position in the sort order as the other parameter.</returns>
            <remarks>The comparison is done based on the id if both the instances have same <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/>.
            If <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is different, then comparison is done based on string representation of the actor id.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.CreateRandom">
            <summary>
            Create a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> of kind <see cref="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Long"/> 
            with a random <see cref="T:System.Int64"/> id value. 
            </summary>
            <returns>A new ActorId object.</returns>
            <remarks>This method is thread-safe and generates a new random <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> every time it is called.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.op_Equality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Determines whether two specified actorIds have the same id and <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/>.
            </summary>
            <param name="x">The first actorId to compare, or null. </param>
            <param name="y">The second actorId to compare, or null. </param>
            <returns>true if the id and <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is same for both objects; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorId.op_Inequality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Determines whether two specified actorIds have different values for id and <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/>.
            </summary>
            <param name="x">The first actorId to compare, or null. </param>
            <param name="y">The second actorId to compare, or null. </param>
            <returns>true if the id or <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> is different for both objects; otherwise, true.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorId.Kind">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> for the ActorId.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorIdKind"/> for the ActorId.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorIdKind">
            <summary>
            Specifies the type of id value for <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Long">
            <summary>
            Represents id value of type <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorIdKind.Guid">
            <summary>
            /// Represents id value of type <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.ActorIdKind.String">
            <summary>
            Represents id value of type <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient">
            <summary>
            Defines the interface for the client that communicate with an actor within a service partition.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient.ActorId">
            <summary>
            Gets the id of the actor this client communicates with.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat">
            <summary>
            Contains static methods for generating names like service name, application name form the actor interface type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetName(System.Type)">
            <summary>
            Gets name of Actor from actorInterfaceType.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <returns>Name of Actor.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceName(System.Type,System.String)">
            <summary>
            Gets name of service which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <param name="serviceName">Name of service hosting the actor type. If this value is null then
            service name is constructed using the actorInterfaceType.</param>
            <returns>Service Fabric service name hosting the actor type.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceUri(System.Type,System.String,System.String)">
            <summary>
            Gets service Uri which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <param name="applicationName">Service Fabric application name containing the actor service.
            If this value is null application name is obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ApplicationName"/>.</param>
            <param name="serviceName">Name of service hosting the actor type. If this value is null then
            service name is constructed using the actorInterfaceType.</param>
            <returns>Service Fabric service Uri hosting the actor type.</returns>
            <exception cref="T:System.ArgumentException">
            When applicationName cannot be determined using <see cref="T:System.Fabric.CodePackageActivationContext"/>.
            </exception>
            <remarks>If applicationName is passed as null or empty string, an attempt is made to get application name from
            <see cref="T:System.Fabric.CodePackageActivationContext"/>. If the method still cannot determine application name,
            <see cref="T:System.ArgumentException"/> is thrown. </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceUri(System.Type)">
            <summary>
            Gets service Uri which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <returns>Service Fabric service Uri hosting the actor type.</returns>
            <exception cref="T:System.ArgumentException">
            When application name cannot be determined using <see cref="T:System.Fabric.CodePackageActivationContext"/>.
            </exception>
            <remarks>Method will try to get application name from <see cref="T:System.Fabric.CodePackageActivationContext"/>.
            If the method still cannot determine application name, <see cref="T:System.ArgumentException"/> is thrown. </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceUri(System.Type,System.Uri)">
            <summary>
            Gets service Uri which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <param name="applicationUri">Service Fabric application Uri containing the actor service.
            If this value is null application name is obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ApplicationName"/>.</param>
            <returns>Service Fabric service Uri hosting the actor type.</returns>
            <exception cref="T:System.ArgumentException">
            When application name cannot be determined using <see cref="T:System.Fabric.CodePackageActivationContext"/>.
            </exception>
            <remarks>Method will create service name using the actorInterfaceType. If applicationUri is passed as null, an attempt is made to get application name from
            <see cref="T:System.Fabric.CodePackageActivationContext"/>. If the method still cannot determine application name,
            <see cref="T:System.ArgumentException"/> is thrown. </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceUri(System.Type,System.Uri,System.String)">
            <summary>
            Gets service Uri which hosts the actor type in Service Fabric cluster.
            </summary>
            <param name="actorInterfaceType">Type of the actor interface.</param>
            <param name="applicationUri">Service Fabric application Uri containing the actor service.
            If this value is null application name is obtained from <see cref="P:System.Fabric.CodePackageActivationContext.ApplicationName"/>.</param>
            <param name="serviceName">Name of service hosting the actor type. If this value is null then
            service name is constructed using the actorInterfaceType.</param>
            <returns>Service Fabric service Uri hosting the actor type.</returns>
            <exception cref="T:System.ArgumentException">
            When application name cannot be determined using <see cref="T:System.Fabric.CodePackageActivationContext"/>.
            </exception>
            <remarks>If applicationUri is passed as null, an attempt is made to get application name from
            <see cref="T:System.Fabric.CodePackageActivationContext"/>. If the method still cannot determine application name,
            <see cref="T:System.ArgumentException"/> is thrown. </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceTypeName(System.Type)">
            <summary>
            Gets service type name for the actor.
            </summary>
            <param name="actorImplementationType">Actor implementation type.</param>
            <returns>Service type name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServicePackageName(System.String)">
            <summary>
            Gets service package name which is used in Service Fabric Application package for the actor.
            </summary>
            <param name="servicePackageNamePrefix">Prefix to be used for the service package name.</param>
            <returns>Service package name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceEndpointName(System.Type)">
            <summary>
            Gets the service endpoint for the actor type which is specified in service manifest for the actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Service endpoint name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceReplicatorEndpointName(System.Type)">
            <summary>
            Gets the replicator endpoint which is specified in service manifest for the actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Service replicator endpoint name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceReplicatorConfigSectionName(System.Type)">
            <summary>
            Gets the replicator configuration section name specified in configuration package for the actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Replicator configuration section name.</returns>
            <remarks>Values specified in replicator configuration section are used to configure <see cref="T:System.Fabric.ReplicatorSettings"/>
            for the replication of actor state between primary and secondary replicas.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceTransportSettingsSectionName(System.Type)">
            <summary>
             Gets the fabrictransport configuration section name specified in configuration package for the actor service.
             </summary>
             <param name="actorImplementationType">Type of class implementing the actor.</param>
             <returns>FabricTransport configuration section name.</returns>
             <remarks>Values specified in FabricTransport configuration section are used to configure <see cref="T:Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings"/>
             for the communication.
             </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceReplicatorSecurityConfigSectionName(System.Type)">
            <summary>
            Gets the replicator security configuration section name specified in configuration package for the actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Replicator security configuration section name.</returns>
            <remarks>Values specified in replicator security configuration section are used to configure <see cref="P:System.Fabric.ReplicatorSettings.SecurityCredentials"/>
            for the replication of actor state between primary and secondary replicas.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetLocalEseStoreConfigSectionName(System.Type)">
            <summary>
            Gets local store configuration section name specified in configuration package for the actor service. 
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Local store configuration section name.</returns>
            <remarks>Values specified in local ESE configuration section are used to configure <see cref="T:System.Fabric.LocalEseStoreSettings"/>
            for storing the state of actor.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetConfigPackageName(System.Type)">
            <summary>
            Gets the configuration package name used in service package for the actor.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>configuration package name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetCodePackageName(System.Type)">
            <summary>
            Gets the code package name used in service package for the actor.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>code package name.</returns>
            <remarks>Code package name can be accessed from within a service as <see cref="P:System.Fabric.CodePackageActivationContext.CodePackageName"/></remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceReplicatorSecurityCredentialTypeName(System.Type)">
            <summary>
            Gets the credential type name used in replicator security configuration section in configuration package for the actor service.
            </summary>
            <param name="actorImplementationType">Type of class implementing the actor.</param>
            <returns>Replicator security credential type name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricApplicationPackageName(System.String)">
            <summary>
            Gets package name used to create Service Fabric Application package for the actor.
            </summary>
            <param name="appPrefix">Prefix to be used for the application package name.</param>
            <returns>Application package name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricApplicationTypeName(System.String)">
            <summary>
            Gets the application type name used in application manifest when creating Service Fabric Application package for the actor.
            </summary>
            <param name="appPrefix">Prefix to be used for the application type name.</param>
            <returns>Application type name.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricApplicationName(System.String)">
            <summary>
            Gets the application name used to create application in Service Fabric cluster.
            </summary>
            <param name="appPrefix">Prefix to be used for the application name.</param>
            <returns>Application name.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ActorReference">
            <summary>
            Encapsulation of a reference to an actor for serialization.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorReference.#ctor">
            <summary>
            Initializes a new instance of the ActorReference class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorReference.Bind(System.Type)">
            <summary>
            Creates an <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxy"/> using 
                <see>
                    <cref>ActorProxy.Create{TActorInterface}(Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)</cref>
                </see>
            method.
            </summary>
            <param name="actorInterfaceType">Interface type of actor.</param>
            <returns>Object representing <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxy"/> for the actor.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ActorReference.Get(System.Object)">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for the actor.
            </summary>
            <param name="actor">Actor object to get <see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.ActorReference"/> object for the actor.</returns>
            <remarks>A null value is returned if actor is passed as null.</remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorReference.ServiceUri">
            <summary>
            Gets Uri of the actor service that hosts the actor in service fabric cluster.
            </summary>
            <value>Service Uri which hosts the actor in service fabric cluster.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorReference.ActorId">
            <summary>
            Gets or sets the <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> of the actor.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> of the actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.ActorReference.ListenerName">
            <summary>
            Gets or sets the name of the listener in the actor service to use when communicating with the actor service.
            </summary>
            <value>The name of the listener</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.CRC64">
            <summary>
            Computes CRC64 for a given byte payload.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.CRC64.Crc64Table">
            <summary>
            CRC table.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.CRC64.ToCRC64(System.Byte[])">
            <summary>
            Returns the CRC64 for the given payload.
            </summary>
            <param name="value">Byte payload.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.CRC64.ToCRC64(System.Byte[][])">
            <summary>
            Returns the CRC64 for the given payload.
            </summary>
            <param name="values">Byte payloads.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.CRC64.ToCrc64String(System.Byte[])">
            <summary>
            Returns the CRC64 in string form for the given payload.
            </summary>
            <param name="value">Byte payload.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActor">
            <summary>
            Base interface for inheriting reliable actor interfaces.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorEventPublisher">
            <summary>
            Represents publisher of actor events. Publishers of actor events must implement this interface
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorEventPublisher`1">
            <summary>
            Represents publisher of actor events. Publishers of actor events must implement this interface
            </summary>
            <typeparam name="TIActorEvents">Actor event interface type derived from <see cref="T:Microsoft.ServiceFabric.Actors.IActorEvents"/>.</typeparam>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorEvents">
            <summary>
            Represents actor events. Interface that creates actor events must implement this interface
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.IActorService">
            <summary>
            Defines the interface containing methods which can be called at Actor Service level.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync(Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets the list of Actors by querying the actor service.
            </summary>
            <param name="continuationToken">A continuation token to start querying the results from.
            A null value of continuation token means start returning values form the beginning.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Deletes an Actor from the Actor service.
            </summary>
            <param name="actorId"><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> of the actor to be deleted.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
            <remarks>
            <para>An active actor, will be deactivated and its state will also be deleted from state provider.</para>
            <para>An in-active actor's state will be deleted from state provider.</para>
            <para>If this method is called for a non-existent actor id in the system, it will be a no-op.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException">
            <summary>
            Exception thrown by actor runtime when reentrant call is made for an actor and its <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorReentrancyMode"/> is set to <see cref="F:Microsoft.ServiceFabric.Actors.Runtime.ActorReentrancyMode.Disallowed"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrancyModeDisallowedException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException">
            <summary>
            Exception thrown by actor runtime if the actor state is invalid during reentrant call.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReentrantActorInvalidStateException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.ActorProxy">
            <summary>
            Provides the base implementation for the proxy to the remote actor objects implementing IActor interfaces.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.IActorProxy">
            <summary>
            Provides the interface for implementation of proxy access for actor service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> associated with the proxy object.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> associated with the proxy object.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient"/> that this proxy is using to communicate with the actor.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient"/> that this proxy is using to communicate with the actor.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxy.#ctor">
            <summary>
            Initializes a new instance of the ActorProxy class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Creates a proxy to the actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">
            The actor interface implemented by the remote actor object. 
            The returned proxy object will implement this interface.
            </typeparam>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy will result in requests 
            being sent to the actor with this id.</param>
            <param name="applicationName">
            Name of the Service Fabric application that contains the actor service hosting the actor objects.
            This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. 
            </param>
            <param name="serviceName">
            Name of the Service Fabric service as configured by <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/> on the actor implementation.
            By default, the name of the service is derived from the name of the actor interface. However <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/>
            is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the 
            serviceName cannot be made automatically.
            </param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>An actor proxy object that implements <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorProxy"/> and TActorInterface.</returns>
            <remarks><para>The applicationName parameter can be null if the client is running as part of the same Service Fabric
            application as the actor service it intends to communicate with. In this case, the application name is determined from
            <see cref="T:System.Fabric.CodePackageActivationContext"/>, and is obtained by calling the 
            <see cref="P:System.Fabric.CodePackageActivationContext.ApplicationName"/> property.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.Uri,System.String)">
            <summary>
            Creates a proxy to the actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">
            The actor interface implemented by the remote actor object. 
            The returned proxy object will implement this interface.
            </typeparam>
            <param name="serviceUri">Uri of the actor service.</param>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy will result in requests 
            being sent to the actor with this id.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>An actor proxy object that implements <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorProxy"/> and TActorInterface.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> associated with the proxy object.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> associated with the proxy object.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient">
            <summary>
            Gets <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient"/> that this proxy is using to communicate with the actor.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient"/> that this proxy is using to communicate with the actor.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions">
            <summary>
            Contains extension methods related to actor events.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)">
            <summary>
            Subscribe to a published actor event.
            </summary>
            <typeparam name="TEvent">The type of the event interface.</typeparam>
            <param name="actorProxy">The actor that publishes the event.</param>
            <param name="subscriber">The subscriber that receives the events.</param>
            <returns>A task that represents the asynchronous operation of subscribing to a published actor event..</returns>
            <exception cref="T:System.ArgumentException">
            <para>When actorProxy is not of type <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxy"/></para>.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0,System.TimeSpan)">
            <summary>
            Subscribe to a published actor event.
            </summary>
            <typeparam name="TEvent">The type of the event interface.</typeparam>
            <param name="actorProxy">The actor that publishes the event.</param>
            <param name="subscriber">The subscriber that receives the events.</param>
            <param name="resubscriptionInterval">The time between re-subscription attempts.</param>
            <returns>A task that represents the asynchronous operation of subscribing to a published actor event.</returns>
            <exception cref="T:System.ArgumentException">
            <para>When actorProxy is not of type <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxy"/></para>.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)">
            <summary>
            Unsubscribe from a published actor event.
            </summary>
            <typeparam name="TEvent">The type of the event interface.</typeparam>
            <param name="actorProxy">The actor that publishes the event.</param>
            <param name="subscriber">The subscriber that receives the event.</param>
            <returns>A task that represents the asynchronous operation of un-subscribing from a published actor event..</returns>
            <exception cref="T:System.ArgumentException">
            <para>When actorProxy is not of type <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxy"/></para>.
            <para>When TEvent doesn't implement <see cref="T:Microsoft.ServiceFabric.Actors.IActorEvents"/></para>
            </exception>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory">
            <summary>
            Factory class to create a proxy to the remote actor objects.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory">
            <summary>
            Defines the interface containing methods to create actor proxy factory class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Creates a proxy to the actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">
            The actor interface implemented by the remote actor object. 
            The returned proxy object will implement this interface.
            </typeparam>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy will result in requests 
            being sent to the actor with this id.</param>
            <param name="applicationName">
            Name of the Service Fabric application that contains the actor service hosting the actor objects.
            This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. 
            </param>
            <param name="serviceName">
            Name of the Service Fabric service as configured by <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/> on the actor implementation.
            By default, the name of the service is derived from the name of the actor interface. However <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/>
            is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the 
            serviceName cannot be made automatically.
            </param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>An actor proxy object that implements <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorProxy"/> and TActorInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Creates a proxy to the actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">
            The actor interface implemented by the remote actor object. 
            The returned proxy object will implement this interface.
            </typeparam>
            <param name="serviceUri">Uri of the actor service.</param>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy will result in requests 
            being sent to the actor with this id.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>An actor proxy object that implements <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorProxy"/> and TActorInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.
            </summary>
            <typeparam name="TServiceInterface">The service interface implemented by the actor service.</typeparam>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="actorId">Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and TServiceInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,System.Int64,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.
            </summary>
            <typeparam name="TServiceInterface">The service interface implemented by the actor service.</typeparam>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="partitionKey">The key of the actor service partition to connect to.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and TServiceInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory.#ctor(System.Func{Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory},Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory"/> class.
            </summary>
            <param name="createServiceRemotingClientFactory">Factory method to create remoting communication client factor.y</param>
            <param name="retrySettings">Retry settings for the remote object calls  made by proxy.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory.CreateActorProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Creates a proxy to the actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">
            The actor interface implemented by the remote actor object. 
            The returned proxy object will implement this interface.
            </typeparam>
            <param name="serviceUri">Uri of the actor service.</param>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy will result in requests 
            being sent to the actor with this id.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>An actor proxy object that implements <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorProxy"/> and TActorInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory.CreateActorProxy``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)">
            <summary>
            Creates a proxy to the actor object that implements an actor interface.
            </summary>
            <typeparam name="TActorInterface">
            The actor interface implemented by the remote actor object. 
            The returned proxy object will implement this interface.
            </typeparam>
            <param name="actorId">Actor Id of the proxy actor object. Methods called on this proxy will result in requests 
            being sent to the actor with this id.</param>
            <param name="applicationName">
            Name of the Service Fabric application that contains the actor service hosting the actor objects.
            This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. 
            </param>
            <param name="serviceName">
            Name of the Service Fabric service as configured by <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/> on the actor implementation.
            By default, the name of the service is derived from the name of the actor interface. However <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/>
            is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the 
            serviceName cannot be made automatically.
            </param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>An actor proxy object that implements <see cref="T:Microsoft.ServiceFabric.Actors.Client.IActorProxy"/> and TActorInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory.CreateActorServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.
            </summary>
            <typeparam name="TServiceInterface">The service interface implemented by the actor service.</typeparam>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="actorId">Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and TServiceInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory.CreateActorServiceProxy``1(System.Uri,System.Int64,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.
            </summary>
            <typeparam name="TServiceInterface">The service interface implemented by the actor service.</typeparam>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="partitionKey">The key of the actor service partition to connect to.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and TServiceInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient)">
            <summary>
            Creates service remoting client factory.
            </summary>
            <param name="callbackClient">Callback from the remoting listener to the client.</param>
            <returns>Created service remoting client factory as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/></returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.ActorServicePartitionClient">
            <summary>
            Specifies the Service partition client for Actor communication
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorServicePartitionClient.#ctor(Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory,System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Instantiates a Partition client for a singleton partitioned service with the given name.
            </summary>
            <param name="remotingClientFactory">Remoting client factory</param>
            <param name="serviceUri">Actor service name</param>
            <param name="actorId">Actor id</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <param name="retrySettings">Retry settings for the remote calls made by the partition client..</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Client.ActorServicePartitionClient.ActorId">
            <summary>
            Actor id. Actor id is used to identify the partition of the service that this actor
            belongs to.
            </summary>
            <value>actor id</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy">
            <summary>
            Proxy used by clients to interact with the actor service running in Service Fabric cluster
            and perform actor service level operations.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.
            </summary>
            <typeparam name="TServiceInterface">The service interface implemented by the actor service.</typeparam>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="actorId">Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and TServiceInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,System.Int64,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.
            </summary>
            <typeparam name="TServiceInterface">The service interface implemented by the actor service.</typeparam>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="partitionKey">The key of the actor service partition to connect to.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and TServiceInterface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.
            </summary>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="actorId">Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and <see cref="T:Microsoft.ServiceFabric.Actors.IActorService"/> interfaces.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,System.Int64,System.String)">
            <summary>
            Create a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.
            </summary>
            <param name="serviceUri">Uri of the actor service to connect to.</param>
            <param name="partitionKey">The key of the actor service partition to connect to.</param>
            <param name="listenerName">
            By default an actor service has only one listener for clients to connect to and communicate with.
            However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.
            </param>
            <returns>A service proxy object that implements <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy"/> and <see cref="T:Microsoft.ServiceFabric.Actors.IActorService"/> interfaces.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteEvent(System.Int32,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement WriteEvent overload to match our reconfiguration events. If this overload is
            not implemented, the standard WriteEvent overload method in the base class that accepts
            an object array as argument gets used and it is not very efficient. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteEvent(System.Int32,System.String,System.String,System.Int32,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement WriteEvent overload to match our activation/deactivation events. If this overload is
            not implemented, the standard WriteEvent overload method in the base class that accepts an
            object array as argument gets used and it is not very efficient. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteEvent(System.Int32,System.Int64,System.String,System.String,System.Int32,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement WriteEvent overload to match our actor metric events. If this overload is not 
            implemented, the standard WriteEvent overload method in the base class that accepts an
            object array as argument gets used and it is not very efficient. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Diagnostics.ActorFrameworkEventSource.WriteActorMethodEvent(System.Int32,System.String,System.Int64,System.String,System.String,System.String,System.String,System.Int32,System.Int64,System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Implement our own method to write the event. If we called WriteEvent directly instead of
            implementing this method, then the standard WriteEvent overload method in the base class
            that accepts an object array as argument gets used and it is not very efficient.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.XmlSerializationUtility.InsertXmlComments``1(System.String,``0)">
            <summary>
            Inserts Xml Comments from existingContent to xml obtained by serializing the object of type T.
            Exception while inserting comments are ignored and content without comments is returned.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Generator.XmlSerializationUtility.InsertXmlComments(System.String,System.String)">
            <summary>
            Inserts Xml Comments from Xml content with comments into Xml content without comments.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Query.ActorInformation">
            <summary>
            Represents the information about an actor returned by Actor Query method call. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Query.ActorInformation.#ctor(Microsoft.ServiceFabric.Actors.ActorId,System.Boolean)">
            <summary>
            Initializes a new instance of the ActorInformation class.
            </summary>
            <param name="actorId">ActorId of actor.</param>
            <param name="isActive">Value indicating if the Actor is active or inactive.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Query.ActorInformation.ActorId">
            <summary>
            Gets ActorId for the actor.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Query.ActorInformation.IsActive">
            <summary>
            Gets if the actor is active.
            </summary>
            <value><see cref="T:System.Boolean"/> indicating if the Actor is active.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Query.ContinuationToken">
            <summary>
            Represents a continuation token for query operations.
            </summary>
            <remarks>A method that may return a partial set of results via a 
            <see cref="T:Microsoft.ServiceFabric.Actors.Query.PagedResult`1"/> object also returns a continuation token
            in the object, which can be used in a subsequent call to return the next set of available results.</remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Query.ContinuationToken.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Query.ContinuationToken"/> class.
            </summary>
            <param name="marker">Marker used to retrieve the next set of available results.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Query.ContinuationToken.Marker">
            <summary>
            Gets a marker used to fetch the next set of available results.
            </summary>
            <value>A marker used to fetch the next set of available results.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Query.PagedResult`1">
            <summary>
            Represents the result of actor query calls.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the items this query result contains.</typeparam>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Query.PagedResult`1.MaxItemsToReturn">
            <summary>
            Max number of items to return in Query Result.
            Default MessageSize of 4 MB with DataContract serialization can include up to 85000 items when ActorInformation only includes ActorId.
            Its set to 10000 to allow for custom serialization and future changes in ActorInformation.
            TODO: Explore allowing optional parameters in ServiceProxy and add optional parameter for itemsToReturn in
                  IActorService.GetActiveActorsAsync and pass its value to PagedResult.Create(). If allowing optional
                  parameters is not an option, then allow this value to be changed from configuration. RDBug# 4828118
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Query.PagedResult`1.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.Query.PagedResult`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Query.PagedResult`1.Items">
            <summary>
            Gets or sets Enumerator to iterate over the results.
            </summary>
            <value>Enumerator, which supports a simple iteration over 
            the collection.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Query.PagedResult`1.ContinuationToken">
            <summary>
            Gets or sets a continuation token indicating if more items need to be fetched by calling the method again.
            </summary>
            <remarks>A null value of continuation token means that the result contains all the items
            and no calls to method needs to be made to fetch more items.</remarks>
            <value>ConinutationToken signifying if the method which returned
            the <see cref="T:Microsoft.ServiceFabric.Actors.Query.PagedResult`1"/> 
            needs to called again to get more results </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.ReminderNotFoundException">
            <summary>
            Exception thrown by actor runtime when a specified reminder is not found for the actor.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReminderNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReminderNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReminderNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReminderNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReminderNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReminderNotFoundException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.ReminderNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.ReminderNotFoundException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.ActorMessageBody">
            <summary>
             Body of the actor messages.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.ActorMessageHeaders">
            <summary>
            Header for the actor messages.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.ActorRemotingProviderAttribute">
            <summary>
            This is a base type for attribute that sets the default remoting provider to use for 
            remoting the actor interfaces defined or used in the assembly.
            </summary>
            <remarks>
                <para>
                On service side, implementation of this attribute is looked up by
                <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorService"/> to create default 
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> for it. 
                </para>
                <para>
                On client side, implementation of this attribute is looked up by 
                <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory"/> constructor to create a default
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/> when it is not specified.
                </para>
                <para>
                Note that on client side when actor proxy is created using the static <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxy"/>
                class, it uses a default <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory"/> once and hence the provider lookup 
                happens only for the first time in an assembly, after which the same provider is used.
                </para>
                <para>
                This attribute is looked up in the following order:
                <list type="number">
                    <item>
                        In the entry <see cref="T:System.Reflection.Assembly"/> obtained by calling method <see cref="M:System.Reflection.Assembly.GetEntryAssembly"/> 
                    </item>
                    <item>
                        In the <see cref="T:System.Reflection.Assembly"/> that defines the remote interface for which listener or proxy is being created. 
                    </item>
                </list>
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.ActorRemotingProviderAttribute.#ctor">
            <summary>
                Instantiates a new <see cref="T:Microsoft.ServiceFabric.Actors.Remoting.ActorRemotingProviderAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.ActorRemotingProviderAttribute.CreateServiceRemotingListener(Microsoft.ServiceFabric.Actors.Runtime.ActorService)">
            <summary>
                Creates a service remoting listener for remoting the actor interfaces.
            </summary>
            <param name="actorService">
                The implementation of the actor service that hosts the actors whose interfaces
                needs to be remoted.
            </param>
            <returns>
                An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> 
                for the specified actor service.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.ActorRemotingProviderAttribute.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient)">
            <summary>
                Creates a service remoting client factory to connected to the remoted actor interfaces.
            </summary>
            <param name="callbackClient">
                Client implementation where the callbacks should be dispatched.
            </param>
            <returns>
                An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/>
                that can be used with <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory"/> to 
                generate actor proxy to talk to the actor over remoted actor interface.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.Builder.ActorMethodDispatcherBase">
            <summary>
            The class is used by actor remoting code generator to generate a type that dispatches requests to actor 
            object by invoking right method on it.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute">
            <summary>
                Sets fabric TCP transport as the default remoting provider for the actors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute.#ctor">
            <summary>
            Instantiates a new <see cref="T:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute"/>, which can be used to set 
            fabric TCP transport as the default remoting provider for the actors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute.CreateServiceRemotingListener(Microsoft.ServiceFabric.Actors.Runtime.ActorService)">
            <summary>
                Creates a service remoting listener for remoting the actor interfaces.
            </summary>
            <param name="actorService">
                The implementation of the actor service that hosts the actors whose interfaces
                needs to be remoted.
            </param>
            <returns>
                A <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener"/>
                as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> 
                for the specified actor service.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute.CreateServiceRemotingClientFactory(Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient)">
            <summary>
                Creates a service remoting client factory to connect to the remoted actor interfaces.
            </summary>
            <param name="callbackClient">
                Client implementation where the callbacks should be dispatched.
            </param>
            <returns>
                A <see cref="T:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingClientFactory"/>
                as <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/>
                that can be used with <see cref="T:Microsoft.ServiceFabric.Actors.Client.ActorProxyFactory"/> to 
                generate actor proxy to talk to the actor over remoted actor interface.
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute.MaxMessageSize">
            <summary>
            Gets or Sets the maximum size of the remoting message in bytes.
            If value for this property is not specified or it is less than or equals to zero,
            a default value of 4,194,304 bytes (4 MB) is used.
            </summary>
            <value>
                The maximum size of the remoting message in bytes. If this value is not specified 
                or it is less than or equals to zero, a default value of 4,194,304 bytes (4 MB) is used.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute.OperationTimeoutInSeconds">
            <summary>
                Gets or Sets the operation timeout in seconds. If the operation is not completed in the specified
                time, it will be timed out. By default, exception handler of 
                <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Client.FabricTransportServiceRemotingClientFactory"/>
                retries the timed out exception. It is recommended to not change the operation timeout from it's default value. 
            </summary>
            <value>
                The operation timeout in seconds. If not specified or less than zero, default operation timeout
                of maximum value is used. 
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingProviderAttribute.KeepAliveTimeoutInSeconds">
            <summary>
                Gets or Sets the keep alive timeout in seconds. This settings is useful in the scenario when the client 
                and service are connected via load balancer that closes the connection if it is idle for some time.
                If keep alive timeout is configured, the connection will be kept alive by sending ping messages at 
                that interval.
            </summary>
            <value>
                The keep alive timeout in seconds.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.Runtime.FabricTransportActorServiceRemotingListener">
            <summary>
                An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingListener"/> 
                that uses fabric TCP transport to provide remoting of actor and service interfaces for actor 
                service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.Runtime.FabricTransportActorServiceRemotingListener.#ctor(Microsoft.ServiceFabric.Actors.Runtime.ActorService,Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings)">
            <summary>
                Construct a fabric TCP transport based service remoting listener for the specified actor service.
            </summary>
            <param name="actorService">
                The implementation of the actor service.
            </param>
            <param name="listenerSettings">
                The settings to use for the listener.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.Runtime.FabricTransportActorServiceRemotingListener.#ctor(System.Fabric.ServiceContext,Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler,Microsoft.ServiceFabric.Services.Communication.FabricTransport.Runtime.FabricTransportListenerSettings)">
            <summary>
                Construct a fabric TCP transport based service remoting listener for the specified actor service.
            </summary>
            <param name="serviceContext">
                The context of the service for which the remoting listener is being constructed.
            </param>
            <param name="messageHandler">
                The handler for processing remoting messages. As the messages are received,
                the listener delivers them to this handler.
            </param>
            <param name="listenerSettings"></param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.Runtime.ActorServiceRemotingDispatcher">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingMessageHandler"/> that can dispatch
            messages to an actor service and to the actors hosted in the service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.Runtime.ActorServiceRemotingDispatcher.#ctor(Microsoft.ServiceFabric.Actors.Runtime.ActorService)">
            <summary>
            Instantiates the ActorServiceRemotingDispatcher that can dispatch messages to an actor service and 
            to the actors hosted in the service..
            </summary>
            <param name="actorService">An actor service instance.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.Runtime.ActorServiceRemotingDispatcher.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.Runtime.IServiceRemotingRequestContext,Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])">
            <summary>
            Dispatches the messages received from the client to the actor service methods or the actor methods.
            </summary>
            <param name="requestContext">Request context that allows getting the callback channel if required.</param>
            <param name="messageHeaders">Service remoting message headers</param>
            <param name="requestBodyBytes">serialized request body of the remoting message.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. 
            The result of the Task is the serialized response body.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorCallType">
            <summary>
            Represents the call-type associated with the method invoked by actor runtime.
            </summary>
            <remarks>
            This is provided as part of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext"/> which is passed as argument to
            <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)"/> and <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)"/>.
            </remarks>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ActorCallType.ActorInterfaceMethod">
            <summary>
            The method invoked is an actor interface method for a given client request.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ActorCallType.TimerMethod">
            <summary>
            The method invoked is a timer callback method.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ActorCallType.ReminderMethod">
            <summary>
            The method invoked on <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable"/> interface when a reminder fires.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext">
            <summary>
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext"/> contains information about the method that is invoked by actor runtime and
            is passed as an argument to <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)"/> and <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext.MethodName">
            <summary>
            Name of the method invoked by actor runtime.
            </summary>
            <value>A string representing the name of method.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext.CallType">
            <summary>
            Type of call by actor runtime (e.g. actor interface method, timer callback etc.).
            </summary>
            <value>
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorCallType"/> representing the call type.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState">
            <summary>
            Represents internal state of Actor Reminder
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder">
            <summary>
            Encapsulates Reminder set on an Actor
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder.Name">
            <summary>
            Name of Reminder set on Actor. The name is unique per actor.
            </summary>
            <value>Name of Reminder set on Actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder.DueTime">
            <summary>
            Time when Reminder is first due.
            </summary>
            <value>Due time as <see cref="T:System.TimeSpan"/> when the reminder is first due.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder.Period">
            <summary>
            Periodic time when Reminder will be invoked.
            </summary>
            <value>Time period as <see cref="T:System.TimeSpan"/> when Reminder will be invoked.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder.State">
            <summary>
            State to be passed into reminder invocation.
            </summary>
            <value>State to be passed into reminder invocation.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.IActorReminderState.RemainingDueTime">
            <summary>
            Time when Reminder is next due.
            </summary>
            <value>Due time as <see cref="T:System.TimeSpan"/> when the reminder is next due.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException">
            <summary>
            This exception indicates that an Actor received the duplicate message while waiting for to acquire 
            the turn based concurrency lock.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.DuplicateMessageException"/> class with a specified error message and
            a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.Client.ActorRemotingExceptionHandler">
            <summary>
            This class provide handling of exceptions encountered in communicating with 
            service fabric actors over remoted actor interfaces.
            </summary>
            <remarks>
            <para>
                This exception handler handles exceptions related to the following scenarios.
            </para>
            <list type="list">
            <item>
            <term>
                Duplicate Messages:
            </term>
            <description> 
            <para>
                Operations performed on the actor are retried from the client based on the exception handling logic. 
                These exceptions represent various error condition including service failover. Therefore it is possible
                for the actors to receive duplicate messages. If a duplicate message is received while previous
                message is being processed by the actor, runtime return an internal exception to the client. 
                The client then retries the operation to get the result back from the actor. From the actor's 
                perspective duplicate operation will be performed by the clients and it should handle it in the similar
                manner as if the operation was already processed and then a duplicate message arrived. 
            </para>
            <para>
                Exception related to duplicate operation being processed is handled by returning <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> from the 
                <see cref="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)"/> method.
                The <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient"/> property of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> is set to true, 
                the <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay"/>  property is set to a random value up to <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnTransientErrors"/> 
                and <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount"/> property is set to <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </description>
            </item>
            <item>
            <term>
                <see cref="T:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException"/>:
            </term>
            <description> 
            <para>
                Operations on the actors are performed using a turn based concurrency lock (<see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencySettings"/>) 
                that supports logical call context based reentrancy. In case of the long running actor operations it is 
                possible for acquisition of this lock to time out. The acquisition of the lock can also time out in case of the deadlock 
                situations (actor A and actor B calling each other almost at the same time). 
            </para>
            <para>
                The exception related to concurrency lock timeout is handled by returning <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> from the 
                <see cref="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)"/> method
                if the client performing the operation is not another actor.
                The <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient"/> property of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult"/> is set to true, 
                the <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay"/>  property is set to a random value up to <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnTransientErrors"/> 
                and <see cref="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount"/> property is set to <see cref="F:System.Int32.MaxValue"/>.
            </para>
            <para>
                The exception related to concurrency lock timeout is handled by returning <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingThrowResult"/> from the 
                <see cref="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)"/> method,
                if the client performing the operation is another actor. In the deadlock situations this allows the call chain to unwind all the way
                back to the original client and the operation is then retried from there.
            </para>
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.Client.ActorRemotingExceptionHandler.#ctor">
            <summary>
                Instantiates a new <see cref="T:Microsoft.ServiceFabric.Actors.Remoting.Client.ActorRemotingExceptionHandler"/> which can be used to handle exceptions encountered in communicating with 
                service fabric actors over remoted actor interfaces.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.Client.ActorRemotingExceptionHandler.Microsoft#ServiceFabric#Services#Communication#Client#IExceptionHandler#TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)">
            <summary>
            Method that examines the exception and determines how that exception can be handled. 
            </summary>
            <param name="exceptionInformation">Information about the exception</param>
            <param name="retrySettings">The operation retry preferences.</param>
            <param name="result">Result of the exception handling</param>
            <returns>true if the exception is handled, false otherwise</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingClientFactory">
            <summary>
            An <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClientFactory"/> that uses
            Fabric TCP transport to create <see cref="T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingClient"/> that communicate with 
            actors over interfaces that are remoted via 
            <see cref="T:Microsoft.ServiceFabric.Services.Remoting.FabricTransport.Runtime.FabricTransportServiceRemotingListener"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingClientFactory.#ctor(Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient)">
            <summary>
            Constructs a fabric transport based actor remoting client factory.
            </summary>
            <param name="callbackClient">
                The callback client that receives the callbacks from the service.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Remoting.FabricTransport.FabricTransportActorRemotingClientFactory.#ctor(Microsoft.ServiceFabric.Services.Communication.FabricTransport.Common.FabricTransportSettings,Microsoft.ServiceFabric.Services.Remoting.IServiceRemotingCallbackClient,Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.String)">
            <summary>
            Constructs a fabric transport based actor remoting client factory.
            </summary>
            <param name="fabricTransportSettings">
                The settings for the fabric transport. If the settings are not provided or null, default settings 
                with no security.
            </param>
            <param name="callbackClient">
                The callback client that receives the callbacks from the service.
            </param>
            <param name="servicePartitionResolver">
                Service partition resolver to resolve the service endpoints. If not specified, a default 
                service partition resolver returned by <see cref="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault"/> is used.
            </param>
            <param name="exceptionHandlers">
                Exception handlers to handle the exceptions encountered in communicating with the actor.
            </param>
            <param name="traceId">
                Id to use in diagnostics traces from this component.
            </param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.Actor">
            <summary>
            Represents a actor that can have multiple reliable 'named' states associated with it.
            </summary>
            <remarks>
            The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is
            provided by the actor state provider <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider"/>.
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorBase"/>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorBase">
            <summary>
            Represents base class for actors.
            </summary>
            <remarks>
            This is a base type for actor, it provides the functionality that is 
            common across actors implemented by actor deriving from <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/>
            The state is preserved across actor garbage collections and fail-overs. The storage and
            retrieval of the state is provided by the actor state provider 
            <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider"/>.
            </remarks>
            <seealso cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync">
            <summary>
            Override this method to initialize the members, initialize state or register timers. This method is called right after the actor is activated
            and before any method call or reminders are dispatched on it.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding OnActivateAsync operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync">
            <summary>
             Override this method to release any resources including unregistering the timers. This method is called right before the actor is deactivated. 
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding OnDeactivateAsync operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)">
            <summary>
            This method is invoked by actor runtime just before invoking an actor method. Override this method
            for performing any actions prior to an actor method is invoked.
            </summary>
            <param name="actorMethodContext">
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext"/> describing the method that will be invoked by actor runtime after this method finishes.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> representing pre-actor-method operation.
            </returns>
            <remarks>
            This method is invoked by actor runtime prior to:
            <list type="bullet">
            <item><description>Invoking an actor interface method when a client request comes.</description></item>
            <item><description>Invoking a method on <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable"/> interface when a reminder fires.</description></item>
            <item><description>Invoking a timer callback when timer fires.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)">
            <summary>
            This method is invoked by actor runtime an actor method has finished execution. Override this method
            for performing any actions after an actor method has finished execution. 
            </summary>
            <param name="actorMethodContext">
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext"/> describing the method that was invoked by actor runtime prior to this method.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> representing post-actor-method operation.
            </returns>
            /// <remarks>
            This method is invoked by actor runtime prior to:
            <list type="bullet">
            <item><description>Invoking an actor interface method when a client request comes.</description></item>
            <item><description>Invoking a method on <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable"/> interface when a reminder fires.</description></item>
            <item><description>Invoking a timer callback when timer fires.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer(Microsoft.ServiceFabric.Actors.Runtime.IActorTimer)">
            <summary>
            Unregisters a Timer previously set on this actor.
            </summary>
            <param name="timer">IActorTimer representing timer that needs to be unregistered..</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent``1">
            <summary>
            Gets the event for the specified event interface.
            </summary>
            <typeparam name="TEvent">Event interface type.</typeparam>
            <returns>Returns Event that represents the specified interface.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder(System.String)">
            <summary>
            Gets the actor reminder with specified reminder name.
            </summary>
            <param name="reminderName">Name of the reminder to get.</param>
            <returns>
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder"/> that represents an actor reminder.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)">
            <summary>
            Unregisters the specified reminder with actor.
            </summary>
            <param name="reminder">The actor reminder to unregister.</param>
            <returns>
            A task that represents the asynchronous unregister operation.
            </returns>
            <exception cref="T:System.Fabric.FabricException">
            When the specified reminder is not registered with actor.
            </exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers a Timer for the actor.
            </summary>
            <param name="asyncCallback">Callback to invoke when timer fires.</param>
            <param name="state">State to pass into timer callback.</param>
            <param name="dueTime">TimeSpan when actor timer is first due.</param>
            <param name="period">TimeSpan for subsequent actor timer invocation.</param>
            <returns>Returns IActorTimer object.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)">
            <summary>
            Registers the specified reminder with actor.
            </summary>
            <param name="reminderName">Name of the reminder to register.</param>
            <param name="state">State associated with reminder.</param>
            <param name="dueTime">
             A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before firing
             the reminder. Specify negative one (-1) milliseconds to prevent reminder from firing. 
             Specify zero (0) to fire the reminder immediately.
            </param>
            <param name="period">
            The time interval between firing of reminders. Specify negative one (-1) milliseconds
            to disable periodic firing.
            </param>
            <returns>
            A task that represents the asynchronous registration operation. The value of TResult
            parameter is an <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder"/> that represents the
            actor reminder that was registered.
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id">
            <summary>
            Gets the identity of this actor with the actor service.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for the actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName">
            <summary>
            Gets the name of the application that contains the actor service that is hosting this actor.
            </summary>
            <value>Name of application that contains the actor service that is hosting this actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri">
            <summary>
            Gets the Uri of the actor service that is hosting this actor.
            </summary>
            <value><see cref="T:System.Uri"/> of the actor service that is hosting this actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService">
            <summary>
            Gets the stateful service replica that is hosting the actor.
            </summary>
            <value>
            A <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorService"/> that represents the stateful service replica hosting the actor.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.Actor.#ctor(Microsoft.ServiceFabric.Actors.Runtime.ActorService,Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/>
            </summary>
            <param name="actorService">
            The <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorService"/> that will host this actor instance.
            </param>
            <param name="actorId">
            The <see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> for this actor instance.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.Actor.SaveStateAsync">
            <summary>
            Saves all the state changes (add/update/remove) that were made since last call to
            <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.Actor.SaveStateAsync"/>,
            to the actor state provider associated with the actor.
            </summary>
            <returns>A task that represents the asynchronous save operation.</returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.Actor.StateManager">
            <summary>
            Gets the state manager for <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/>
            which can be used to get/add/update/remove named states.
            </summary>
            <value>
            An <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager"/> which can be used to manage actor state.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorEventProxy">
            <summary>
            Provides the base implementation for the proxy to invoke methods on actor event subscribers.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorEventProxy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorEventProxy"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings">
            <summary>
            Settings to configures Garbage Collection behavior of Actor Service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings.#ctor">
            <summary>
            Initializes a new instance of the ActorGarbageCollectionSettings class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings.#ctor(Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the ActorGarbageCollectionSettings class.
            </summary>
            <param name="idleTimeoutInSeconds">Time interval to wait before garbage collecting an actor which is not in use.</param>
            <param name="scanIntervalInSeconds">Time interval to run Actor Garbage Collection scan.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para>When idleTimeoutInSeconds is less than or equal to 0.</para>
            <para>When scanIntervalInSeconds is less than or equal to 0.</para>
            <para>When idleTimeoutInSeconds is less than scanIntervalInSeconds.</para>
            </exception>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings.ScanIntervalInSeconds">
            <summary>
            Gets time interval to run Actor Garbage Collection scan.
            </summary>
            <value>Time interval in <see cref="T:System.Int64"/> to run Actor Garbage Collection scan.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings.IdleTimeoutInSeconds">
            <summary>
            Gets time interval to wait before garbage collecting an actor which is not in use.
            </summary>
            <value>Time interval in <see cref="T:System.Int64"/> to wait before garbage collecting an actor which is not in use.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorManager.GetActorsFromStateProvider(Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Returns Actors list by querying state provider for Actors.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorRuntime">
            <summary>
            Contains methods to register actor type with Service Fabric runtime.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorRuntime.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorRuntime"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorRuntime.RegisterActorAsync``1(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Registers an actor type with Service Fabric runtime.
            </summary>
            <typeparam name="TActor">Type implementing the actor.</typeparam>
            <param name="timeout">A timeout period after which the registration operation will be canceled.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation to register actor type with Service Fabric runtime.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorRuntime.RegisterActorAsync``1(System.Func{System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation,Microsoft.ServiceFabric.Actors.Runtime.ActorService},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Registers an actor service with Service Fabric runtime.
            </summary>
            <typeparam name="TActor">Type implementing actor.</typeparam>
            <param name="actorServiceFactory">Delegate to create new actor service.</param>
            <param name="timeout">A timeout period after which the registration operation will be canceled.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation to register actor service with Service Fabric runtime.</returns>
            <remarks>
            actorServiceFactory delegate is called by Reliable Actors runtime to create new actor service.
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorReminderCollection">
            <summary>
            Actor reminder collection.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection">
            <summary>
            Captures ActorReminderState for Actors
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorService">
            <summary>
            Represents the base class for Microsoft Service Fabric based reliable actors service.
            </summary>
            <remarks>
            Derive from this class to implement your own custom actor service if you want to override
            any service level behavior for your actors.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation,System.Func{Microsoft.ServiceFabric.Actors.Runtime.ActorService,Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.ActorBase},System.Func{Microsoft.ServiceFabric.Actors.Runtime.ActorBase,Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider,Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager},Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider,Microsoft.ServiceFabric.Actors.Runtime.ActorServiceSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorService"/> class.
            </summary>
            <param name="context">Service context the actor service is operating under.</param>
            <param name="actorTypeInfo">Type information of the actor.</param>
            <param name="actorFactory">A factory method to create actor objects.</param>
            <param name="stateManagerFactory">A factory method to create <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager"/></param>
            <param name="stateProvider">State provider to store the state for actor objects.</param>
            <param name="settings">/// Settings to configures behavior of Actor Service.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.Microsoft#ServiceFabric#Actors#IActorService#DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Deletes an Actor from the Actor service.
            </summary>
            <param name="actorId"><see cref="T:Microsoft.ServiceFabric.Actors.ActorId"/> of the actor to be deleted.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
            <remarks>
            <para>An active actor, will be deactivated and its state will also be deleted from state provider.</para>
            <para>An in-active actor's state will be deleted from state provider.</para>
            <para>If this method is called for a non-existent actor id in the system, it will be a no-op.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.Microsoft#ServiceFabric#Actors#IActorService#GetActorsAsync(Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets the list of Actors by querying the actor service.
            </summary>
            <param name="continuationToken">A continuation token to start querying the results from.
            A null value of continuation token means start returning values form the beginning.</param>
            <param name="cancellationToken">Propagates notification that operations should be canceled.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.CreateServiceReplicaListeners">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CreateServiceReplicaListeners"/>.
            </summary>
            <returns>Endpoint string pairs like 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation of loading reminders when the replica becomes primary.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="newRole">New role for the replica.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation performed when the replica becomes primary.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnCloseAsync(System.Threading.CancellationToken)"/>.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation performed when the replica is closed.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorService.OnAbort">
            <summary>
            Overrides <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnAbort"/>.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorService.ActorTypeInformation">
            <summary>
            Gets ActorTypeInformation for actor service.
            </summary>
            <value>
            <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation"/>
            for the actor hosted by the service replica.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorService.StateProvider">
            <summary>
            Gets a <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider"/> that represents the state provider for the actor service.
            </summary>
            <value>
            <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider"/>
            representing the state provider for the actor service.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorService.Settings">
            <summary>
            Gets settings for the actor service. 
            </summary>
            <value>
            Settings for the actor service.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute">
            <summary>
            This attributes allows configuring the properties of the actor service. 
            The attribute is applied on the actor type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the ActorServiceAttribute class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute.Name">
            <summary>
            The relative name of the actor service. This name will be combined with the application name to provide the full name of the 
            actor service. 
            </summary>
            <remarks>
                <para>
                By default, the actor service name is derived from the type of the actor interface 
                (<see cref="M:Microsoft.ServiceFabric.Actors.Generator.ActorNameFormat.GetFabricServiceName(System.Type,System.String)"/>). 
                However, in case when an actor interface is implemented by more than one actor, including by a derived type, 
                the name cannot be determined from the actor interface in an unambiguous manner. 
                In that case, the name of the actor service must be configured using this property of the 
                <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/>.
                </para>
            </remarks>
            <value>The name of the actor service relative to the application name.</value>
            
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceSettings">
            <summary>
            Settings to configures behavior of Actor Service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceSettings.#ctor">
            <summary>
            Initializes a new instance of the ActorServiceSettings class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceSettings.ActorGarbageCollectionSettings">
            <summary>
            Gets or sets garbage collection settings for the Actor service.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorGarbageCollectionSettings"/> for the Actor Service.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceSettings.ActorConcurrencySettings">
            <summary>
            Gets or sets settings to configure the turn based concurrency lock for actors.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencySettings"/> for the Actor Service.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange">
            <summary>
            Represents change to an actor state with a given state name.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange.#ctor(System.String,System.Type,System.Object,Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind)">
            <summary>
            Creates an instance of ActorStateChange class.
            </summary>
            <param name="stateName">Name of the actor state</param>
            <param name="type">Type of value associated with given actor state name.</param>
            <param name="value">Value associated with given actor state name.</param>
            <param name="changeKind">Kind of state change for given actor state name.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange.StateName">
            <summary>
            Gets name of the actor state.
            </summary>
            <value>
            Name of the actor state.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange.Type">
            <summary>
            Gets the type of value associated with given actor state name.
            </summary>
            <value>
            Type of value associated with given actor state name.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange.Value">
            <summary>
            Gets the value associated with given actor state name.
            </summary>
            <value>
            Value associated with given actor state name.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange.ChangeKind">
            <summary>
            Gets the kind of state change for given actor state name.
            </summary>
            <value>
            Kind of state change for given actor state name.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager">
            <summary>
            Represents the interface that state manager for <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/> implements.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Adds an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to add.</param>
            <param name="value">Value of the actor state to add.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous add operation.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            An actor state with given state name already exists.
            </exception>
            <exception cref="T:System.ArgumentNullException">The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an actor state with specified state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to get.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous get operation. The value of TResult
            parameter contains value of actor state with given state name.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            An actor state with given state name does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException">The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Sets an actor state with given state name to specified value.
            If an actor state with specified name does not exist, it is added.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to set.</param>
            <param name="value">Value of the actor state.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous set operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes an actor state with specified state name.
            </summary>
            <param name="stateName">Name of the actor state to remove.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous remove operation.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            An actor state with given state name does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException"> The specified state name is null. </exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Attempts to add an actor state with given state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to add.</param>
            <param name="value">Value of the actor state to add.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous add operation. The value of TResult
            parameter indicates if the state was successfully added.
            </returns>
            <exception cref="T:System.ArgumentNullException">The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to get an actor state with specified state name.
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to get.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous get operation. The value of TResult
            parameter contains <see cref="T:Microsoft.ServiceFabric.Data.ConditionalValue`1"/>
            indicating whether the actor state is present and the value of actor state if it is present.
            </returns>
            <exception cref="T:System.ArgumentNullException">The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Attempts to remove an actor state with specified state name.
            </summary>
            <param name="stateName">Name of the actor state to remove.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous remove operation. The value of TResult
            parameter indicates if the state was successfully removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if an actor state with specified name exists.
            </summary>
            <param name="stateName">Name of the actor state.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous check operation. The value of TResult
            parameter is <c>true</c> if state with specified name exists otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"> The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Gets an actor state with given state name, if it exists or adds the state with
            specified state name and value, if it does not exist. 
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to get or add.</param>
            <param name="value">Value of the actor state to add if it does not exist.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous get or add operation. The value of TResult
            parameter contains value of actor state with given state name.
            </returns>
            <exception cref="T:System.ArgumentNullException"> The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync``1(System.String,``0,System.Func{System.String,``0,``0},System.Threading.CancellationToken)">
            <summary>
            Adds an actor state with given state name, if it does not already exist or updates
            the state with specified state name, if it exists. 
            </summary>
            <typeparam name="T">Type of value associated with given state name.</typeparam>
            <param name="stateName">Name of the actor state to add or update.</param>
            <param name="addValue">Value of the actor state to add if it does not exist.</param>
            <param name="updateValueFactory">Factory function to generate value of actor state to update if it exists.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous add/update operation. The value of TResult
            parameter contains value of actor state that was added/updated.
            </returns>
            <exception cref="T:System.ArgumentNullException"> The specified state name is null.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The type of state value <typeparamref name="T"/> must be 
            <see href="https://msdn.microsoft.com/library/ms731923.aspx">Data Contract</see> serializable.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync(System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable of all actor state names for current actor.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous enumeration operation. The value of TResult
            parameter is an enumerable of all actor state names.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync(System.Threading.CancellationToken)">
            <summary>
            Clears all the cached actor states and any operation(s) performed on <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager"/>
            since last state save operation.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous clear cache operation.
            </returns>
            <remarks>
            All the operation(s) performed on <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager"/>  since last save operation are cleared on
            clearing the cache and will not be included in next save operation.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all the cached state changes (add/update/remove) that were made since last call to
            <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)"/> by actor runtime or by user explicitly.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous save operation.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.IActorTimer">
            <summary>
            Represents Timer set on an Actor
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.IActorTimer.DueTime">
            <summary>
            Time when timer is first due.
            </summary>
            <value>Time as <see cref="T:System.TimeSpan"/> when timer is first due.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.IActorTimer.Period">
            <summary>
            Periodic time when timer will be invoked.
            </summary>
            <value>Periodic time as <see cref="T:System.TimeSpan"/> when timer will be invoked.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeExtensions">
            <summary>
            Contains extension method for Actor types.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeExtensions.GetActorInterfaces(System.Type)">
            <summary>
            Gets actor interfaces implemented by the actor class.
            </summary>
            <param name="type">Type of class implementing actor.</param>
            <returns>An array containing actor interface which the type implements.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeExtensions.GetActorEventInterfaces(System.Type)">
            <summary>
            Gets actor event interfaces implemented by the actor class.
            </summary>
            <param name="type">Type of class implementing actor.</param>
            <returns>An array containing actor event interface which the type implements.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeExtensions.IsActorInterface(System.Type)">
            <summary>
            Checks if an interface type is an actor interface.
            </summary>
            <param name="actorInterfaceType">Interface type of the actor.</param>
            <returns>true, if actorInterfaceType is an interface only implements <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/>
            or (<see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> and <see cref="T:Microsoft.ServiceFabric.Actors.IActorEventPublisher"/>).</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeExtensions.IsActor(System.Type)">
            <summary>
            Checks if an actorType is an actor.
            </summary>
            <param name="actorType">Type implementing actor.</param>
            <returns>true, if <see cref="P:System.Type.BaseType"/> of actorType is <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/>.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeExtensions.IsRemindableActor(System.Type)">
            <summary>
            Checks if an actor type implements <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable"/> interface.
            </summary>
            <param name="actorType">Type implementing actor.</param>
            <returns>true, if <paramref name="actorType"/> implements <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable"/> interface.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation">
            <summary>
            Contains information about the type implementing an actor.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.#ctor">
            <summary>
            Initializes a new instance of the ActorTypeInformation class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.TryGet(System.Type,Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation@)">
            <summary>
            Creates <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation"/> from actorType.
            </summary>
            <param name="actorType">Type of class implementing the actor to create ActorTypeInforamtion for.</param>
            <param name="actorTypeInformation">When this method returns, contains ActorTypeInformation, if the creation of
            ActorTypeInformation from actorType succeeded, or null if the creation failed.
            The creation fails if the actorType parameter is null or it does not implement an actor.</param>
            <returns>true if ActorTypeInformation was successfully created for actorType; otherwise, false.</returns>
            <remarks>
            <para>Creation of ActorTypeInformation from actorType will fail when </para> 
            <para>1. <see cref="P:System.Type.BaseType"/> for actorType is not of type <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/>.</para>
            <para>2. actorType does not implement an interface deriving from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> and is not marked as abstract.</para>
            <para>3. actorType implements more than one interface which derives from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> 
            but doesn't have <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.Get(System.Type)">
            <summary>
            Creates <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation"/> from actorType.
            </summary>
            <param name="actorType">Type of class implementing the actor to create ActorTypeInforamtion for.</param>
            <returns><see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation"/> created from actorType.</returns>
            <exception cref="T:System.ArgumentException">
            <para>When <see cref="P:System.Type.BaseType"/> for actorType is not of type <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.Actor"/>.</para>
            <para>When actorType does not implement an interface deriving from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> 
            and is not marked as abstract.</para>
            <para>When actorType implements more than one interface which derives from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> 
            but doesn't have <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/>.</para>
            </exception>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.ImplementationType">
            <summary>
            Gets type of the class implementing the actor.
            </summary>
            <value><see cref="T:System.Type"/> of the class implementing the actor.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.InterfaceTypes">
            <summary>
            Gets the actor interface types which derive from <see cref="T:Microsoft.ServiceFabric.Actors.IActor"/> and implemented by actor class.
            </summary>
            <value>An enumerator that can be used to iterate through the actor interface type.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.EventInterfaceTypes">
            <summary>
            Gets actor event interface which the actor class implements.
            </summary>
            <value>An enumerator hat can be used to iterate through the actor event interface which the actor class implements.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.ServiceName">
            <summary>
            Gets service name if specified using <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/> for actor class.
            </summary>
            <value>Service name if specified using <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute"/> for actor class, null if attribute is not used.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.IsAbstract">
            <summary>
            Gets if class implementing actor is abstract.
            </summary>
            <value>true if class implementing actor is abstract, otherwise false.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.IsRemindable">
            <summary>
            Gets if the actor class implements <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable"/>.
            </summary>
            <value>true if actor class implements <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable"/>, otherwise false.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation.StatePersistence">
            <summary>
            Get the <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.StatePersistence"/> enum representing type of state persistence for the actor.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Runtime.StatePersistence"/> representing type of state persistence for the actor.</value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ActorUseScope.timerUse">
            <summary>
            Signifies if the use is for a timer call.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.DummyActor">
            <summary>
            DummyActor object is created in case of Deletion of inactive actor.
            DummyActor object's ReentrantGuard is used for blocking other calls.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider">
            <summary>
            Represents the interface that an actor state provider needs to implement for 
            actor runtime to communicate with it. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)">
            <summary>
            Initializes the actor state provider with type information
            of the actor type associated with it.
            </summary>
            <param name="actorTypeInformation">Type information of the actor class</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            This method is invoked as part of the activation process of the actor with the specified Id. 
            </summary>
            <param name="actorId">ID of the actor that is activated.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <returns>A task that represents the asynchronous Actor activation notification processing.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)">
            <summary>
            This method is invoked when a reminder fires and finishes executing its callback 
            <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.IRemindable.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)"/> successfully.
            </summary>
            <param name="actorId">ID of the actor which own reminder</param>
            <param name="reminder">Actor reminder that completed successfully.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous reminder callback completed notification processing.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the actor state associated with the specified state name.
            </summary>
            <typeparam name="T">Type of value of actor state associated with given state name.</typeparam>
            <param name="actorId">ID of the actor for which to load the state.</param>
            <param name="stateName">Name of the actor state to load.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Actor state associated with specified state name does not exist.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter contains value of actor state associated with given state name.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)">
            <summary>
            Saves the specified set of actor state changes atomically.
            </summary>
            <param name="actorId">ID of the actor for which to save the state changes.</param>
            <param name="stateChanges">Collection of state changes to save.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <remarks>
            The collection of state changes should contain only one item for a given state name.
            The save operation will fail on trying to add an actor state which already exists 
            or update/remove an actor state which does not exist.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            When <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.None"/>
            </exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether actor state provider contains an actor state with 
            specified state name.
            </summary>
            <param name="actorId">ID of the actor for which to check state existence.</param>
            <param name="stateName">Name of the actor state to check for existence.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous check operation. The value of TResult
            parameter is <c>true</c> if state with specified name exists otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Removes all the existing states and reminders associated with specified actor atomically.
            </summary>
            <param name="actorId">ID of the actor for which to remove state.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous remove operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable of all the state names associated with specified actor.
            </summary>
            <remarks>
            The enumerator returned from actor state provider is safe to use concurrently
            with reads and writes to the state provider. It represents a snapshot consistent
            view of the state provider.
            </remarks>
            <param name="actorId">ID of the actor for which to create enumerable.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous enumeration operation. The value of TResult
            parameter is an enumerable of all state names associated with specified actor.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets ActorIds from the State Provider.
            </summary>
            <param name="numItemsToReturn">Number of items requested to be returned.</param>
            <param name="continuationToken">
            A continuation token to start querying the results from.
            A null value of continuation token means start returning values form the beginning.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The <paramref name="continuationToken"/> is relative to the state of actor state provider
            at the time of invocation of this API. If the state of actor state provider changes (i.e.
            new actors are activated or existing actors are deleted) in between calls to this API and
            the continuation token from previous call (before the state was modified) is supplied, the 
            result may contain entries that were already fetched in previous calls.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)">
            <summary>
            Saves the specified actor reminder. If an actor reminder with
            given name does not exist, it adds the actor reminder otherwise
            existing actor reminder with same name is updated. 
            </summary>
            <param name="actorId">ID of the actor for which to save the reminder.</param>
            <param name="reminder">Actor reminder to save.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified actor reminder if it exists.
            </summary>
            <param name="actorId">ID of the actor for which to delete the reminder.</param>
            <param name="reminderName">Name of the reminder to delete.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous delete operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(System.Threading.CancellationToken)">
            <summary>
            Loads all the reminders contained in the actor state provider.
            </summary>
            <param name="cancellationToken">Cancellation token for asynchronous load operation.</param>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter is a collection of all actor reminders contained in the actor state provider.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.IdleObjectGcHandle.collectEarly">
            <summary>
            Signals that object can be collected early rather than waiting until idleCount ==maxIdleCount
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable">
            <summary>
            Interface which actors that use reminders must implement.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.IRemindable.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)">
            <summary>
            Reminder call back invoked when an actor reminder is triggered.
            </summary>
            <param name="reminderName">Name of reminder.</param>
            <param name="context">Context associated with this reminder was passed to Actors runtime
            when reminder was created.</param>
            <param name="dueTime">Time when reminder with name reminderName is due.</param>
            <param name="period">The time interval between triggering of reminder with name reminderName.</param>
            <returns>A task that represents the asynchronous operation performed by this callback.</returns>
            <remarks>
            <para>When a reminder is triggered, Actors runtime will invoke ReceiveReminderAsync method on the Actor. 
            An actor can register multiple reminders and the ReceiveReminderAsync method is invoked any time
            any of those reminders is triggered. The actor can use the reminder name that is passed in to the
            ReceiveReminderAsync method to figure out which reminder was triggered.</para>
            <para>The Actors runtime saves the actor state when the ReceiveReminderAsync call completes.
            If an error occurs in saving the state, that actor object will be deactivated and a new instance
            will be activated.
            to specify that the state need not be saved upon completion of the reminder</para>.</remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider"/> which 
            uses <see cref="T:System.Fabric.KeyValueStoreReplica"/> to store and persist the actor state.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.isBackupInProgress">
            <summary>
            Ensures single backup in progress at ActorStateProvider level.
            This enables cleaning up the backup directory before invoking into KeyValueStoreReplica's backup. 
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.backupCallbackLock">
            <summary>
            Used to synchronize between backup callback invocation and replica close/abort
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider"/> with default settings.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.#ctor(System.Fabric.ReplicatorSettings,System.Fabric.LocalStoreSettings)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider"/> with specified
            replicator and local key-value store settings.
            </summary>
            <param name="replicatorSettings">
            A <see cref="T:System.Fabric.ReplicatorSettings"/> that describes replicator settings.
            </param>
            <param name="localStoreSettings">
            A <see cref="T:System.Fabric.LocalStoreSettings"/> that describes local key value store settings.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)">
            <summary>
            Initializes the actor state provider with type information
            of the actor type associated with it.
            </summary>
            <param name="actorTypeInformation">Type information of the actor class</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            This method is invoked as part of the activation process of the actor with the specified Id. 
            </summary>
            <param name="actorId">ID of the actor that is activated.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <returns> A task that represents the asynchronous Actor activation notification processing.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)">
            <summary>
            This method is invoked when a reminder fires and finishes executing its callback 
            <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.IRemindable.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)"/> successfully.
            </summary>
            <param name="actorId">ID of the actor which own reminder</param>
            <param name="reminder">Actor reminder that completed successfully.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous reminder callback completed notification processing.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the actor state associated with the specified state name.
            </summary>
            <typeparam name="T">Type of value of actor state associated with given state name.</typeparam>
            <param name="actorId">ID of the actor for which to load the state.</param>
            <param name="stateName">Name of the actor state to load.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Actor state associated with specified state name does not exist.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter contains value of actor state associated with given state name.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)">
            <summary>
            Saves the specified set of actor state changes atomically.
            </summary>
            <param name="actorId">ID of the actor for which to save the state changes.</param>
            <param name="stateChanges">Collection of state changes to save.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <remarks>
            The collection of state changes should contain only one item for a given state name.
            The save operation will fail on trying to add an actor state which already exists 
            or update/remove an actor state which does not exist.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            When <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.None"/>
            </exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether actor state provider contains an actor state with 
            specified state name.
            </summary>
            <param name="actorId">ID of the actor for which to check state existence.</param>
            <param name="stateName">Name of the actor state to check for existence.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous check operation. The value of TResult
            parameter is <c>true</c> if state with specified name exists otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Removes all the existing states and reminders associated with specified actor atomically.
            </summary>
            <param name="actorId">ID of the actor for which to remove state.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous remove operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable of all the state names associated with specified actor.
            </summary>
            <remarks>
            The enumerator returned from actor state provider is safe to use concurrently
            with reads and writes to the state provider. It represents a snapshot consistent
            view of the state provider.
            </remarks>
            <param name="actorId">ID of the actor for which to create enumerable.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous enumeration operation. The value of TResult
            parameter is an enumerable of all state names associated with specified actor.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#GetActorsAsync(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets ActorIds from the State Provider.
            </summary>
            <param name="numItemsToReturn">Number of items requested to be returned.</param>
            <param name="continuationToken">
            A continuation token to start querying the results from.
            A null value of continuation token means start returning values form the beginning.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The <paramref name="continuationToken"/> is relative to the state of actor state provider
            at the time of invocation of this API. If the state of actor state provider changes (i.e.
            new actors are activated or existing actors are deleted) in between calls to this API and
            the continuation token from previous call (before the state was modified) is supplied, the 
            result may contain entries that were already fetched in previous calls.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)">
            <summary>
            Saves the specified actor reminder. If an actor reminder with
            given name does not exist, it adds the actor reminder otherwise
            existing actor reminder with same name is updated. 
            </summary>
            <param name="actorId">ID of the actor for which to save the reminder.</param>
            <param name="reminder">Actor reminder to save.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified actor reminder if it exists.
            </summary>
            <param name="actorId">ID of the actor for which to delete the reminder.</param>
            <param name="reminderName">Name of the reminder to delete.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous delete operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#LoadRemindersAsync(System.Threading.CancellationToken)">
            <summary>
            Loads all the reminders contained in the actor state provider.
            </summary>
            <param name="cancellationToken">Cancellation token for asynchronous load operation.</param>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter is a collection of all actor reminders contained in the actor state provider.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            Initialize the state provider replica using the service initialization information.
            </summary>
            <remarks>
            No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync.
            </remarks>
            <param name="initializationParameters">
            Service initialization information such as service name, partition id, replica id, and code package information.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            Open the state provider replica for use.
            </summary>
            <remarks>
            Extended state provider initialization tasks can be started at this time.
            </remarks>
            <param name="openMode">Indicates whether this is a new or existing replica.</param>
            <param name="partition">The partition this replica belongs to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            Task that represents the asynchronous open operation. The result contains the replicator
            responsible for replicating state between other state provider replicas in the partition.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            Notify the state provider replica that its role is changing, for example to Primary or Secondary.
            </summary>
            <param name="newRole">The new replica role, such as primary or secondary.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous change role operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Gracefully close the state provider replica.
            </summary>
            <remarks>
            This generally occurs when the replica's code is being upgrade, the replica is being moved
            due to load balancing, or a transient fault is detected.
            </remarks>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous close operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort">
            <summary>
            Forcefully abort the state provider replica.
            </summary>
            <remarks>
            This generally occurs when a permanent fault is detected on the node, or when
            Service Fabric cannot reliably manage the replica's life-cycle due to internal failures.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs a full backup of all reliable state managed by this actor sate provider.
            </summary>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            A FULL backup will be performed with a one-hour timeout.
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs backup of reliable state managed by this actor sate provider.
            </summary>
            <param name="option">Option for the backup.</param>
            <param name="timeout">Timeout for the backup.</param>
            <param name="cancellationToken">Cancellation token for the backup.</param>
            <param name="backupCallback">Callback to be called once the backup folder is ready.</param>
            <returns>Task that represents the asynchronous operation.</returns>
            <remarks>
            KVSActorStateProvider Backup only support Full backup. KVS BackupInfo does not contain backup version.
            The Backup version is set to invalid.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#RestoreAsync(System.String)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="restorePolicy">The restore policy.</param>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            This parameter cannot be null, empty or contain just whitespace. 
            UNC paths may also be provided.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.GetStoredActorIds(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            KVS enumerates its entries in alphabetical order. The implementation of this
            function takes this into account while doing continuation token based enumeration.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.KvsActorStateProvider.OnDataLossAsync">
            <summary>
            Function called during suspected data-loss.
            </summary>
            <value>
            A function representing data-loss callback function.
            </value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencyLock">
            <summary>
            Provides a turn based concurrency that supports logical call based reentrancy for actor calls
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencySettings">
            <summary>
            The method calls on an actor dispatched via in turn with support for logical call context based reentrancy. This class
            provides the settings to configure the turn based concurrency lock for actors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencySettings.#ctor">
            <summary>
            Initializes a new instance of the ActorConcurrencySettings class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencySettings.ReentrancyMode">
            <summary>
            Gets or sets Reentrancy mode for actor method calls.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Runtime.ActorReentrancyMode"/> for the actor method calls.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ActorConcurrencySettings.LockTimeout">
            <summary>
            Gets or sets timeout for the turn based concurrency lock. If the runtime cannot acquire the lock to dispatch the method
            call, it will throw <see cref="T:Microsoft.ServiceFabric.Actors.ActorConcurrencyLockTimeoutException"/> exception. 
            This exception will unwind the logical call chain and the call will retried up to a configured maximum amount of times.
            </summary>
            <remarks>
            The actual timeout value for the concurrency lock can be higher as the runtime will add a random interval to 
            the supplied value.
            </remarks>
            <value>Timeout for the turn based concurrency lock.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorReentrancyMode">
            <summary>
            Specifies Reentrancy mode for actor method calls.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ActorReentrancyMode.LogicalCallContext">
            <summary>
            Allows actors to be reentrant if they are in the same call context chain. This is the default option for actors.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ActorReentrancyMode.Disallowed">
            <summary>
            Disallows actors to be reentrant. In this case if an actor sends a reentrant message to another 
            actor an exception of type <see cref="T:System.Fabric.FabricException"/> will be thrown.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider">
            <summary>
            Actor state provider that uses a ReliableDictionary for actor storage.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.LogicalTimestampKey">
            <summary>
            Logical timestamp key.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.DefaultTransientErrorRetryDelayInSeconds">
            <summary>
            Default back off for transient exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.actorPresenceStateProviderName">
            <summary>
            Uri for the actor presence state provider dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.stateProviderName">
            <summary>
            Uri for the actor state provider dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.reminderStateProviderName">
            <summary>
            Uri for the reminder state provider dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.logicalTimeStateProviderName">
            <summary>
            Uri for the logical time state provider dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.stateManager">
            <summary>
            Gets the fabric store replica. This component provides data storage and replication.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.replicaRole">
            <summary>
            Role of this replica
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.logicalTimeManager">
            <summary>
            Volatile logical time manager.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.actorPresencestateProvider">
            <summary>
            State provider to keep track of all existing actors.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.stateProvider">
            <summary>
            Internal state provider.
            </summary>
            TODO: This should not be byte[].
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.reminderStateProvider">
            <summary>
            Reminder state provider.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.logicalTimeStateProvider">
            <summary>
            Logical time state provider.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.IsStateProvidersInitialized">
            <summary>
            Indicates if the state providers have been initialized.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.transientErrorRetryDelay">
            <summary>
            Back off for transient errors.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.#ctor">
            <summary>
            Initializes a new instance of the ReliableDictionaryActorStateProvider class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the ReliableDictionaryActorStateProvider class.
            </summary>
            <param name="retryDelay">Back off for retries.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Close of the replica.
            </summary>
            <param name="cancellationToken">The cancelation token.</param>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort">
            <summary>
            Abort of the replica.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.InitializeStateProvidersAsync(System.Threading.CancellationToken)">
            <summary>
            Creates or finds the singleton state provider.
            </summary>
            <returns>Task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.CreateReminderStorageKey(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)">
            <summary>
            Creates a reminder key.
            </summary>
            <param name="actorId">The actor id.</param>
            <param name="reminder">The reminder.</param>
            <returns>String that represents the key.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.CreateReminderStorageKey(Microsoft.ServiceFabric.Actors.ActorId,System.String)">
            <summary>
            Creates a reminder key.
            </summary>
            <param name="actorId">The actor id.</param>
            <param name="reminderName">Name of the reminder.</param>
            <returns>String that represents the key.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.RemoveActorAtomically(Microsoft.ServiceFabric.Actors.ActorId)">
            <summary>
            Removes all the state and reminder associated with actor.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.ServiceInitializationParameters">
            <summary>
            Gets the initialization parameters for the service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.ActorTypeInformation">
            <summary>
            Gets the actor type information.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.StateProvider">
            <summary>
            Gets the reliable dictionary to maintain state for the actors.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.ReliableDictionaryActorStateProvider.OnDataLossAsync">
            <summary>
            On data loss event.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind">
            <summary>
            Represents kind of state change for an actor state when 
            <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)"/>
            saves changes to a set of actor states.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.None">
            <summary>
            No change in state
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.Add">
            <summary>
            The state needs to be added.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.Update">
            <summary>
            The state needs to be updated.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.Remove">
            <summary>
            The state needs to be removed.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.StatePersistence">
            <summary>
            Indicates how actor state is stored for an actor service.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.StatePersistence.None">
            <summary>
            No state is stored for the actor.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.StatePersistence.Volatile">
            <summary>
            Actor state is kept in-memory only using a volatile state provider.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.StatePersistence.Persisted">
            <summary>
            Actor state is persisted to local disk using a persistent state provider.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.StatePersistenceAttribute">
            <summary>
            Indicates whether actor state should be volatile (in-memory only), persisted, or not stored at all.
            The store type given to this attribute must match the type of state provider used in the actor service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.StatePersistenceAttribute.#ctor(Microsoft.ServiceFabric.Actors.Runtime.StatePersistence)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.StatePersistenceAttribute"/>
            </summary>
            <param name="statePersistence">Indicates how actor state is stored for an actor service.</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.StatePersistenceAttribute.StatePersistence">
            <summary>
            Get or sets the enum representing type of state store to use for the actor.
            </summary>
            <value><see cref="T:Microsoft.ServiceFabric.Actors.Runtime.StatePersistence"/> representing type of state store to use for the actor.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.ActorStateProviderHelper">
            <summary>
            The code  in this class is shared by the different actor state providers (Kvs, RD, Volatile and Null).
            If you are adding any code/behavior that is common to different actor state provider(s), please add
            it to this class.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider"/> where actor state is kept in-memory and is volatile.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.#ctor">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.#ctor(System.Fabric.ReplicatorSettings)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider"/> with 
            specified replicator settings.
            </summary>
            <param name="replicatorSettings">
            A <see cref="T:System.Fabric.ReplicatorSettings"/> that describes replicator settings.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)">
            <summary>
            Initializes the actor state provider with type information
            of the actor type associated with it.
            </summary>
            <param name="actorTypeInfo">Type information of the actor class</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            This method is invoked as part of the activation process of the actor with the specified Id. 
            </summary>
            <param name="actorId">ID of the actor that is activated.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <returns> A task that represents the asynchronous Actor activation notification processing.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)">
            <summary>
            This method is invoked when a reminder fires and finishes executing its callback 
            <see cref="M:Microsoft.ServiceFabric.Actors.Runtime.IRemindable.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)"/> successfully.
            </summary>
            <param name="actorId">ID of the actor which own reminder</param>
            <param name="reminder">Actor reminder that completed successfully.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous reminder callback completed notification processing.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Loads the actor state associated with the specified state name.
            </summary>
            <typeparam name="T">Type of value of actor state associated with given state name.</typeparam>
            <param name="actorId">ID of the actor for which to load the state.</param>
            <param name="stateName">Name of the actor state to load.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Actor state associated with specified state name does not exist.</exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter contains value of actor state associated with given state name.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)">
            <summary>
            Saves the specified set of actor state changes atomically.
            </summary>
            <param name="actorId">ID of the actor for which to save the state changes.</param>
            <param name="stateChanges">Collection of state changes to save.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <remarks>
            The collection of state changes should contain only one item for a given state name.
            The save operation will fail on trying to add an actor state which already exists 
            or update/remove an actor state which does not exist.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            When <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind"/> is <see cref="F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.None"/>
            </exception>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether actor state provider contains an actor state with 
            specified state name.
            </summary>
            <param name="actorId">ID of the actor for which to check state existence.</param>
            <param name="stateName">Name of the actor state to check for existence.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous check operation. The value of TResult
            parameter is <c>true</c> if state with specified name exists otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Removes all the existing states and reminders associated with specified actor atomically.
            </summary>
            <param name="actorId">ID of the actor for which to remove state.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous remove operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable of all the state names associated with specified actor.
            </summary>
            <remarks>
            The enumerator returned from actor state provider is safe to use concurrently
            with reads and writes to the state provider. It represents a snapshot consistent
            view of the state provider.
            </remarks>
            <param name="actorId">ID of the actor for which to create enumerable.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous enumeration operation. The value of TResult
            parameter is an enumerable of all state names associated with specified actor.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#GetActorsAsync(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)">
            <summary>
            Gets ActorIds from the State Provider.
            </summary>
            <param name="itemsCount">Number of items requested to be returned.</param>
            <param name="continuationToken">
            A continuation token to start querying the results from.
            A null value of continuation token means start returning values form the beginning.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation of call to server.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
            <remarks>
            The <paramref name="continuationToken"/> is relative to the state of actor state provider
            at the time of invocation of this API. If the state of actor state provider changes (i.e.
            new actors are activated or existing actors are deleted) in between calls to this API and
            the continuation token from previous call (before the state was modified) is supplied, the 
            result may contain entries that were already fetched in previous calls.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)">
            <summary>
            Saves the specified actor reminder. If an actor reminder with
            given name does not exist, it adds the actor reminder otherwise
            existing actor reminder with same name is updated. 
            </summary>
            <param name="actorId">ID of the actor for which to save the reminder.</param>
            <param name="reminder">Actor reminder to save.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous save operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified actor reminder if it exists.
            </summary>
            <param name="actorId">ID of the actor for which to delete the reminder.</param>
            <param name="reminderName">Name of the reminder to delete.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous delete operation.</returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Actors#Runtime#IActorStateProvider#LoadRemindersAsync(System.Threading.CancellationToken)">
            <summary>
            Loads all the reminders contained in the actor state provider.
            </summary>
            <param name="cancellationToken">Cancellation token for asynchronous load operation.</param>
            <returns>
            A task that represents the asynchronous load operation. The value of TResult
            parameter is a collection of all actor reminders contained in the actor state provider.
            </returns>
            <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize(System.Fabric.StatefulServiceInitializationParameters)">
            <summary>
            Initialize the state provider replica using the service initialization information.
            </summary>
            <remarks>
            No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync.
            </remarks>
            <param name="initializationParameters">Service initialization information such as service name, partition id, replica id, and code package information.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)">
            <summary>
            Open the state provider replica for use.
            </summary>
            <remarks>
            Extended state provider initialization tasks can be started at this time.
            </remarks>
            <param name="openMode">Indicates whether this is a new or existing replica.</param>
            <param name="partition">The partition this replica belongs to.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            Task that represents the asynchronous open operation. The result contains the replicator
            responsible for replicating state between other state provider replicas in the partition.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            Notify the state provider replica that its role is changing, for example to Primary or Secondary.
            </summary>
            <param name="newRole">The new replica role, such as primary or secondary.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous change role operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)">
            <summary>
            Gracefully close the state provider replica.
            </summary>
            <remarks>
            This generally occurs when the replica's code is being upgrade, the replica is being moved
            due to load balancing, or a transient fault is detected.
            </remarks>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous close operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort">
            <summary>
            Forcefully abort the state provider replica.
            </summary>
            <remarks>
            This generally occurs when a permanent fault is detected on the node, or when
            Service Fabric cannot reliably manage the replica's life-cycle due to internal failures.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs a full backup of state managed by this actor state provider
            </summary>
            <param name="backupCallback">Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            Backup/restore is not supported by <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Performs backup of state managed by this actor sate provider.
            </summary>
            <param name="option">Option for the backup.</param>
            <param name="timeout">Timeout for the backup.</param>
            <param name="cancellationToken">Cancellation token for the backup.</param>
            <param name="backupCallback">Callback to be called once the backup folder is ready.</param>
            <returns>Task that represents the asynchronous operation.</returns>
            <remarks>
            Backup/restore is not supported by <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#RestoreAsync(System.String)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            </param>
            <remarks>
            Backup/restore is not supported by <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider"/>.
            </remarks>
            <returns>Task that represents the asynchronous restore operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.Microsoft#ServiceFabric#Data#IStateProviderReplica#RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)">
            <summary>
            Restore a backup taken by <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/> or 
            <see cref="M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})"/>.
            </summary>
            <param name="restorePolicy">The restore policy.</param>
            <param name="backupFolderPath">
            The directory where the replica is to be restored from.
            </param>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous restore operation.</returns>
            /// <remarks>
            Backup/restore is not supported by <see cref="T:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.System#Fabric#IStateProvider#GetCopyContext">
            <summary>
            <para>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IOperationDataStream"/>.</para>
            </returns>
            <remarks>
            <para>The Primary replica analyzes the context and sends back state via <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/>.</para>
            <para>
                <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> is called on newly created, idle Secondary replicas and provides
                a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <see cref="T:System.Fabric.OperationData"/>
                objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back.
                See <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/> at the Primary replica for the other half of the exchange. </para>
            <para>For in-memory services, the <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> method is not called, 
            as the state of the Secondary replicas is known (they are empty and will require all of the state).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.System#Fabric#IStateProvider#GetCopyState(System.Int64,System.Fabric.IOperationDataStream)">
            <summary>
            <para>Obtains state on a Primary replica that is required to build a Secondary replica.</para>
            </summary>
            <param name="upToSequenceNumber">
            <para>The maximum last sequence number (LSN) that should be placed in the copy stream via the <see cref="M:System.Fabric.IStateReplicator.GetCopyStream"/> method.
            LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <see cref="M:System.Fabric.IStateReplicator.GetReplicationStream"/> method.</para>
            </param>
            <param name="copyContext">
            <para>An <see cref="T:System.Fabric.IOperationDataStream"/> that contains the <see cref="T:System.Fabric.OperationData"/> objects that are created by the Secondary replica. </para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Fabric.IOperationDataStream"/>.</para>
            </returns>
            <remarks>
            <para>Just as <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> enables the Secondary replica to send context to the Primary replica via
            an <see cref="T:System.Fabric.IOperationDataStream"/>, <see cref="M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)"/> enables the Primary 
            replica to respond with an <see cref="T:System.Fabric.IOperationDataStream"/>. The stream contains objects that are delivered to the Secondary replica
            via the <see cref="M:System.Fabric.IStateReplicator.GetCopyStream"/> method of the <see cref="T:System.Fabric.FabricReplicator"/> class. The objects implement 
            <see cref="T:System.Fabric.IOperation"/> and contain the specified data. </para>
            <para> When the Primary replica receives this call, it should create and return another <see cref="T:System.Fabric.IOperationDataStream"/> 
            that contains <see cref="T:System.Fabric.OperationData"/>. <see cref="T:System.Fabric.OperationData"/> represents the data/state that the Secondary replica
            requires to catch up to the provided <paramref name="upToSequenceNumber"/> maximum LSN. 
            How much and which state has to be sent can be determined via the context information that the Secondary replica provides via 
            <see cref="M:System.Fabric.IStateProvider.GetCopyContext"/> method.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.System#Fabric#IStateProvider#GetLastCommittedSequenceNumber">
            <summary>
            <para>Obtains the last sequence number that the service has committed. </para>
            </summary>
            <returns>
            <para>Returns <see cref="T:System.Int64"/>.</para>
            </returns>
            <remarks>
            <para>This method is called on a service when it first starts up, in case it has any persistent state, and when data loss is suspected. 
            When a stateful service replica starts up, it has the option to restore any data that might have persisted from previous updates.
            If it restores some state in this manner, its current progress is the last written sequence number for that data. A volatile service can simply return 0.
            Note that this method is not called to determine a new primary election during fail-over, 
            because the current committed progress is already known by the <see cref="T:System.Fabric.FabricReplicator"/> class at that time. </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.System#Fabric#IStateProvider#OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            <para>Indicates that a write quorum of replicas in this replica set  has been lost, and that therefore data loss might have occurred. 
            The replica set consists of a majority of replicas, which includes the Primary replica. </para>
            </summary>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. 
            It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task`1"/> of type <see cref="T:System.Boolean"/>, that indicates whether state changed. 
            When it changed, the method returns true or when it did not change, the method returns false.</para>
            </returns>
            <remarks>
            <para>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the Primary replica, 
            it elects a new Primary replica and immediately calls this method on the new Primary replica. A Primary replica that is informed of possible data loss
            can choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state,
            it should return false from this method, which indicates that no state change has been made. If it has restored or altered its state,
            such as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect.
            Therefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.System#Fabric#IStateProvider#UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)">
            <summary>
            <para>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the Primary replica. 
            The change occurs due to failure or load balancing of the previous Primary replica. Epoch changes act as a barrier by segmenting operations 
            into the exact configuration periods in which they were sent by a specific Primary replica.</para>
            </summary>
            <param name="epoch">
            <para>The new <see cref="T:System.Fabric.Epoch"/>.</para>
            </param>
            <param name="previousEpochLastSequenceNumber">
            <para> The maximum sequence number (LSN) that should have been observed in the previous epoch.</para>
            </param>
            <param name="cancellationToken">
            <para>The <see cref="T:System.Threading.CancellationToken"/> object that the operation is observing. It can be used to send a notification 
            that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</para>
            </param>
            <returns>
            <para>Returns <see cref="T:System.Threading.Tasks.Task"/>.</para>
            </returns>
            <remarks>
            <para>This method is called because the Primary replica of the replica set has changed, or a change was attempted. 
            Secondary replicas receive this method either when they are about to become the new Primary replica, or, if they are not the new Primary replica, 
            they receive it when they attempt to get the first operation from the new Primary replica from the replication stream. 
            Primary replicas might occasionally receive this method if there is an attempt to swap the Primary replica, which fails.</para>
            <para>The information in the <see cref="M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)"/> 
            method enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. The progress vector data along with the current applied maximum LSN is useful for a Secondary replica to send during the copy operation  to describe how far the operation has progressed. Comparing progress vectors that are received from Secondary replicas during the copy operation enables Primary replicas to determine whether the Secondary replica is up-to-date, what state must be sent to the Secondary replica, and whether the Secondary replica has made false progress. False progress means that an LSN in a previous epoch was greater than the LSN that the Primary replica receives. </para>
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.OnDataLossAsync">
            <summary>
            Function called during suspected data-loss.
            </summary>
            <value>
            A function representing data-loss callback function.
            </value>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateProvider.CopyStateEnumerator.copyStateList">
            <summary>
            This LinkedList represents actor state data grouped by sequence number in increasing
            order of sequence number. Each entry in the LinkedList contains sequence number and
            all the ActorStateDataWrapper entries which belong to that sequence number.
            This grouping is required to maintain replication boundary during copy operation
            to build a replica.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateTable`3.pendingReplicationContexts">
            <summary>
            Operations are only committed in sequence number order. This is needed
            to perform builds correctly - i.e. without sequence number "holes" in
            the copy data. ReplicationContext tracks whether a replication operation is
            
                1) quorum acked
                2) completed
                
            A replication operation is only completed when it is quorum acked and there
            are no other operations with lower sequence numbers that are not yet
            quorum acked.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateTable`3.committedEntriesList">
            <summary>
            Lists of entries are in non-decreasing sequence number order and used to
            take a snapshot of the current state when performing builds. The sequence numbers
            will not be contiguous if there were deletes.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Actors.Runtime.VolatileActorStateTable`3.GetShallowCopiesEnumerator(System.Int64)">
            <summary>
            The use of read/write locks means that the process of creating shallow
            copies will necessarily compete with replication operations. i.e.
            The process of preparing for a copy will block replication.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Actors.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorDeletedExceptionMessage">
            <summary>
              Looks up a localized string similar to Actor id {0} was deleted using DeleteActorAsync while this call was in prgoress. This call should be retried..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorGCSettingsNotValid">
            <summary>
              Looks up a localized string similar to idleTimeoutInSeconds must be greater than or equal to scanIntervalInSeconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorGCSettingsValueOutOfRange">
            <summary>
              Looks up a localized string similar to Specified value must be greater than 0..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorNotIRemindable">
            <summary>
              Looks up a localized string similar to Reminders cannot be registered or unregistered on Actor {0} because it doesnt implement IRemindable.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorProxyOnlyMethod">
            <summary>
              Looks up a localized string similar to This method can only be called on ActorProxy..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorStateAlreadyExists">
            <summary>
              Looks up a localized string similar to The actor state name &apos;{0}&apos; already exist..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ActorStateAlreadyRemovedCurrentContext">
            <summary>
              Looks up a localized string similar to The Actor state &apos;{0}&apos; was already removed in current call context..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ConcurrencyLockTimedOut">
            <summary>
              Looks up a localized string similar to Acquisition of turn based concurrency lock for actor &apos;{0}&apos; timed out after {1} seconds..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.DeleteActorConflictWithLoadReminders">
            <summary>
              Looks up a localized string similar to Delete request for Actor {0} cannot be processed now since the actor is loading reminders. Please try again later..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.Error_InvalidContinuationToken">
            <summary>
              Looks up a localized string similar to Invalid value for Continuation token..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorAbstractActorRegistrationNotAllowed">
            <summary>
              Looks up a localized string similar to The actor type &apos;{0}&apos; is abstract. Abstract actors cannot be registered as they cannot be instantiated..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMessageHeadersDeserializationFailed">
            <summary>
              Looks up a localized string similar to Failed to deserialize ActorMessageHeaders.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodDoesNotReturnTask">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; does not return Task or Task&lt;&gt;. The actor interface methods must be async and must return either Task or Task&lt;&gt;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasGenerics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; is using generics. The actor interface methods cannot use generics..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasOutRefOptionalParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; has out/ref/optional parameter &apos;{2}&apos;. The actor interface methods must not have out, ref or optional parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasVaArgParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; has variable length parameter &apos;{2}&apos;. The actor interface methods must not have variable length parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodHasVaArgs">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; is using a variable argument list. The actor interface methods cannot have a variable argument list..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorMethodsIsOverloaded">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; is overloaded. The actor interface methods cannot be overloaded..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorNotFound">
            <summary>
              Looks up a localized string similar to Actor {0} is not found in the input assembly. Ensure that it derives from either {1} or {2} and implements and {3} interface..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorActorStateNotSerializable">
            <summary>
              Looks up a localized string similar to &quot;{0}&lt;{1}&gt;: Actor state must have a callable constructor and be serializable.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorApplicationName">
            <summary>
              Looks up a localized string similar to Failed to determine the current application, please provide application name..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorCasting">
            <summary>
              Looks up a localized string similar to Could not cast {0} to {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorDeserializeRemoteException">
            <summary>
              Looks up a localized string similar to Failed to deserialize and get remote exception..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorDuplicateMessage">
            <summary>
              Looks up a localized string similar to Actor {0}  got same request more than once. This might happen for a request which takes more processing time than configured OperationTimeout 
               on Client side as client retries on TimeoutException..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventInterface">
            <summary>
              Looks up a localized string similar to Cannot determine the event interface from the supplied generic type argument. Supply the event interface type..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventInterfaceMustBeIActorEvents">
            <summary>
              Looks up a localized string similar to The type &apos;{0} is not an actor events interface. The actor event interface must only derive from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodDoesNotReturnVoid">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor interface &apos;{1}&apos; returns &apos;{2}. The actor event interface methods must not return anything. The return type must be &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasGenerics">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; is using generics. The actor event interface methods cannot use generics..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasOutRefOptionalParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; has out/ref/optional parameter &apos;{2}&apos;. The actor event interface methods must not have out, ref or optional parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasVaArgParameter">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; has variable length parameter &apos;{2}&apos;. The actor event interface methods must not have variable length parameters..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodHasVaArgs">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; is using a variable argument list. The actor event interface methods cannot have a variable argument list..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventMethodsIsOverloaded">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of actor event interface &apos;{1}&apos; is overloaded. The actor event interface methods cannot be overloaded..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorEventNotSupportedByActor">
            <summary>
              Looks up a localized string similar to Event with eventId &apos;{0}&apos; is not supported by Actor with actorId &apos;{1}&apos; .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorHighestSequenceNumberLessThanUpToSequenceNumber">
            <summary>
              Looks up a localized string similar to HighestSequenceNumber({0}) &lt; UpToSequenceNumber({1}).
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorInvalidMethodId">
            <summary>
              Looks up a localized string similar to Method Id &apos;{0}&apos; is not available for ActorEventSubscription.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorInvalidReminderAttribute">
            <summary>
              Looks up a localized string similar to Invalid ReminderAttribute..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorMethodDispatcherNotFound">
            <summary>
              Looks up a localized string similar to No MethodDispatcher is found for interface id &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorMethodNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; method is not supported for type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorMoreThanOneActorInterfaceFound">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; must implement only one actor interface..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNamedActorStateNotFound">
            <summary>
              Looks up a localized string similar to Actor State with name {0} was not found..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorInterfaceFound">
            <summary>
              Looks up a localized string similar to The actor type &apos;{0}&apos; does not implement any actor interfaces. An actor interface is the one that derives from &apos;{1}&apos; type..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorServiceNameMultipleImpl">
            <summary>
              Looks up a localized string similar to The actor interface {0} is implemented by actor types {1} and {2}. In order for the client to connect to the right actor, please add {3} attribute with valid Name on the both actor types. Please use this Name as serviceName parameter when creating ActorProxy. .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorServiceNameMultipleImplDerivation">
            <summary>
              Looks up a localized string similar to The actor type {1} is inherited from actor type {2}. Therefore the actor interface {0} has multiple implementation. In order for the client to connect to the right actor, please add {3} attribute with valid Name on the both actor types. Please use this Name as serviceName parameter when creating ActorProxy. If the actor type {1} should not be instantiated, please make it abstract..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorServiceNameMultipleInterfaces">
            <summary>
              Looks up a localized string similar to The actor type {0} implements more than one actor interfaces. In order for the client to connect to the right actor, please add {1} attribute with valid Name on the actor type. Please use this Name as serviceName parameter when creating ActorProxy..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorStateCallableConstructors">
            <summary>
              Looks up a localized string similar to Actor state has no callable constructors with default argument values.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNoActorStateConstructors">
            <summary>
              Looks up a localized string similar to Actor state has no constructors.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActor">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an Actor. An actor type must derive from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActorInterface_DerivationCheck1">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an actor interface as it does not derive from the interface &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActorInterface_DerivationCheck2">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an actor interface as it derive from a non actor interface &apos;{1}&apos;. All actor interfaces must derive from &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorNotAnActorInterface_InterfaceCheck">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not an Actor interface as it is not an interface. .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorOnDataLossAsyncReset">
            <summary>
              Looks up a localized string similar to OnDataLossAsync can only be set once..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ErrorReplicatorSettings">
            <summary>
              Looks up a localized string similar to Null {0} in replicator settings.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorActivated">
            <summary>
              Looks up a localized string similar to Actor activated. Actor type: {0}, actor ID: {1}, replica/instance ID: {3}, partition ID: {4}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorDeactivated">
            <summary>
              Looks up a localized string similar to Actor deactivated. Actor type: {0}, actor ID: {1},  replica/instance ID: {3}, partition ID: {4}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodCallsWaitingForLock">
            <summary>
              Looks up a localized string similar to Number of actor method calls waiting for the actor lock: {0}, actor type: {1}, actor ID: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodStart">
            <summary>
              Looks up a localized string similar to Actor method is being invoked. Method name: {0}, actor type: {2}, actor ID: {3}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodStop">
            <summary>
              Looks up a localized string similar to Actor method has completed. Method name: {1}, actor type: {3}, actor ID: {4}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorMethodThrewException">
            <summary>
              Looks up a localized string similar to Actor&apos;s async method threw an exception. Method name: {2}, actor type: {4}, actor ID: {5}, exception: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorSaveStateStart">
            <summary>
              Looks up a localized string similar to Starting to save actor state. Actor type: {0}, actor ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorSaveStateStop">
            <summary>
              Looks up a localized string similar to Finished saving actor state. Actor type: {1}, actor ID: {2}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorTypeRegistered">
            <summary>
              Looks up a localized string similar to Actor type {0} registered..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ActorTypeRegistrationFailed">
            <summary>
              Looks up a localized string similar to Failed to register actor type {1}. Exception: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ReplicaChangeRoleFromPrimary">
            <summary>
              Looks up a localized string similar to Actor replica changed role to non-Primary. Replica ID: {0}, partition ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.event_ReplicaChangeRoleToPrimary">
            <summary>
              Looks up a localized string similar to Actor replica changed role to Primary. Replica ID: {0}, partition ID: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidActorKind">
            <summary>
              Looks up a localized string similar to The method &apos;{0}&apos; is not valid for &apos;{1}&apos; ActorId..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidCallContextReleased">
            <summary>
              Looks up a localized string similar to Call context does not match current call context.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidIsReadOnlyNonExistingActorState">
            <summary>
              Looks up a localized string similar to Invalid value for argument IsReadOnly &apos;{0}&apos; for non-existing Actor state &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidReentrancyConfiguration">
            <summary>
              Looks up a localized string similar to Actor {0} can be decorated with atmost one Reentrancy attribute.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidReentrantCall">
            <summary>
              Looks up a localized string similar to A reentrant call has been made from actor while there are other outstanding actor calls. Atmost one reentrant call is allowed at a time..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.InvalidStateChangeKind">
            <summary>
              Looks up a localized string similar to StateChangeKind can  only  be add, update or remove..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_ActorMethod">
            <summary>
              Looks up a localized string similar to ActorMethod.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_ActorState">
            <summary>
              Looks up a localized string similar to ActorState.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_Default">
            <summary>
              Looks up a localized string similar to Default.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.keyword_MetricActorMethodCallsWaitingForLock">
            <summary>
              Looks up a localized string similar to MetricActorMethodCallsWaitingForLock.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.map_ActorIdKind_Guid">
            <summary>
              Looks up a localized string similar to Guid.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.map_ActorIdKind_Long">
            <summary>
              Looks up a localized string similar to Long.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.map_ActorIdKind_String">
            <summary>
              Looks up a localized string similar to String.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ReentrancyModeDisallowed">
            <summary>
              Looks up a localized string similar to Actor {0} does not allow reentrant calls. ReentrancyMode must be set to LogicalCallContext to allow reentrant calls.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ReentrantActorDirtyState">
            <summary>
              Looks up a localized string similar to A reentrant call to Actor {0} found its state to be dirty. This typically indicates programming error..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ReminderNotFound">
            <summary>
              Looks up a localized string similar to Reminder {0} was not found for Actor {1}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ReminderNotSupported">
            <summary>
              Looks up a localized string similar to Reminder cannot be registered for type {0} because the class does not implement {1}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.ScriptGeneratorInvalidContent">
            <summary>
              Looks up a localized string similar to Invalid Content..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.TimerArgumentOutOfRange">
            <summary>
              Looks up a localized string similar to TimeSpan TotalMilliseconds specified value must be between {0} and {1} .
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.UnexpectedCounterType">
            <summary>
              Looks up a localized string similar to The system has a counter with the same category and counter name, but its counter type is not what we expect..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Actors.SR.UnregisterReminderConflict">
            <summary>
              Looks up a localized string similar to Reminder {0} for Actor {1} cannot be registered or unregistered since the actor is loading reminders. Please try again later..
            </summary>
        </member>
    </members>
</doc>
